
ATmega809.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803c00  00803c00  00000934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00803c00  00803c00  00000934  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004766  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029ae  00000000  00000000  0000520e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1f  00000000  00000000  00007bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  000087dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000198c  00000000  00000000  00008aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4c  00000000  00000000  0000a42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000ae78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_9>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_16>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_clear_bss>:
  ac:	2c e3       	ldi	r18, 0x3C	; 60
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	bc e3       	ldi	r27, 0x3C	; 60
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	ab 34       	cpi	r26, 0x4B	; 75
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	5f d3       	rcall	.+1726   	; 0x77c <main>
  be:	fe c3       	rjmp	.+2044   	; 0x8bc <_exit>

000000c0 <__bad_interrupt>:
  c0:	9f cf       	rjmp	.-194    	; 0x0 <__vectors>

000000c2 <reset>:
 */ 

#include "Buffer.h"

void reset(BUFFER *self) {
	self->idx = 0;
  c2:	fc 01       	movw	r30, r24
  c4:	16 86       	std	Z+14, r1	; 0x0e
  c6:	08 95       	ret

000000c8 <getLength>:
}

uint8_t getLength(BUFFER *self) {
	return self->idx;
}
  c8:	fc 01       	movw	r30, r24
  ca:	86 85       	ldd	r24, Z+14	; 0x0e
  cc:	08 95       	ret

000000ce <push>:

void push(BUFFER *self, uint8_t data) {
  ce:	fc 01       	movw	r30, r24
	if(self->idx < BUFFER_SIZE) {
  d0:	96 85       	ldd	r25, Z+14	; 0x0e
  d2:	97 30       	cpi	r25, 0x07	; 7
  d4:	38 f4       	brcc	.+14     	; 0xe4 <push+0x16>
		self->data[self->idx] = data;
  d6:	df 01       	movw	r26, r30
  d8:	a9 0f       	add	r26, r25
  da:	b1 1d       	adc	r27, r1
  dc:	1f 96       	adiw	r26, 0x0f	; 15
  de:	6c 93       	st	X, r22
		self->idx++;
  e0:	9f 5f       	subi	r25, 0xFF	; 255
  e2:	96 87       	std	Z+14, r25	; 0x0e
  e4:	08 95       	ret

000000e6 <initBuffer>:
	}
}

void initBuffer(BUFFER *self) {
  e6:	fc 01       	movw	r30, r24
	self->push = &push;
  e8:	87 e6       	ldi	r24, 0x67	; 103
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	86 8b       	std	Z+22, r24	; 0x16
  ee:	97 8b       	std	Z+23, r25	; 0x17
	self->reset = &reset;
  f0:	81 e6       	ldi	r24, 0x61	; 97
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	82 8f       	std	Z+26, r24	; 0x1a
  f6:	93 8f       	std	Z+27, r25	; 0x1b
	self->getLength = &getLength;
  f8:	84 e6       	ldi	r24, 0x64	; 100
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	80 8f       	std	Z+24, r24	; 0x18
  fe:	91 8f       	std	Z+25, r25	; 0x19

	self->PTR.cmd = &self->data[0];
 100:	cf 01       	movw	r24, r30
 102:	0f 96       	adiw	r24, 0x0f	; 15
 104:	80 83       	st	Z, r24
 106:	91 83       	std	Z+1, r25	; 0x01
	self->PTR.addr1 = &self->data[1];
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	82 83       	std	Z+2, r24	; 0x02
 10c:	93 83       	std	Z+3, r25	; 0x03
	self->PTR.addr2 = &self->data[2];
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	84 83       	std	Z+4, r24	; 0x04
 112:	95 83       	std	Z+5, r25	; 0x05
	self->PTR.addr3 = &self->data[3];
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	86 83       	std	Z+6, r24	; 0x06
 118:	97 83       	std	Z+7, r25	; 0x07
	self->PTR.param1 = &self->data[4];
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	80 87       	std	Z+8, r24	; 0x08
 11e:	91 87       	std	Z+9, r25	; 0x09
	self->PTR.param2 = &self->data[5];
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	82 87       	std	Z+10, r24	; 0x0a
 124:	93 87       	std	Z+11, r25	; 0x0b
	self->PTR.param3 = &self->data[6];
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	84 87       	std	Z+12, r24	; 0x0c
 12a:	95 87       	std	Z+13, r25	; 0x0d
	
	self->idx = 0;
 12c:	16 86       	std	Z+14, r1	; 0x0e
 12e:	08 95       	ret

00000130 <processAndRespondBuffer>:
	self->DATA_PORT->OUT = 0;
	writeToAddrPort(self, 0x00);
	sei();
}

void processAndRespondBuffer(DRAM_HANDLER *self) {
 130:	4f 92       	push	r4
 132:	5f 92       	push	r5
 134:	6f 92       	push	r6
 136:	7f 92       	push	r7
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
	const uint8_t cmd = *self->msgBuffer.PTR.cmd;
 14e:	e8 8d       	ldd	r30, Y+24	; 0x18
 150:	f9 8d       	ldd	r31, Y+25	; 0x19
 152:	b0 80       	ld	r11, Z
	if(cmd == READ_CMD || cmd == WRITE_CMD || cmd == READ_BURST_CMD) {
 154:	8f ee       	ldi	r24, 0xEF	; 239
 156:	8b 0d       	add	r24, r11
 158:	8e 01       	movw	r16, r28
 15a:	08 5e       	subi	r16, 0xE8	; 232
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	08 f0       	brcs	.+2      	; 0x164 <processAndRespondBuffer+0x34>
 162:	71 c0       	rjmp	.+226    	; 0x246 <processAndRespondBuffer+0x116>
		const uint32_t addr = ( ((uint32_t)*self->msgBuffer.PTR.addr1) << 16 ) | ( ((uint32_t)*self->msgBuffer.PTR.addr2) << 8 ) | (*self->msgBuffer.PTR.addr3);
 164:	ea 8d       	ldd	r30, Y+26	; 0x1a
 166:	fb 8d       	ldd	r31, Y+27	; 0x1b
 168:	80 81       	ld	r24, Z
 16a:	ec 8d       	ldd	r30, Y+28	; 0x1c
 16c:	fd 8d       	ldd	r31, Y+29	; 0x1d
 16e:	c0 80       	ld	r12, Z
 170:	d1 2c       	mov	r13, r1
 172:	e1 2c       	mov	r14, r1
 174:	f1 2c       	mov	r15, r1
 176:	fe 2c       	mov	r15, r14
 178:	ed 2c       	mov	r14, r13
 17a:	dc 2c       	mov	r13, r12
 17c:	cc 24       	eor	r12, r12
 17e:	e8 2a       	or	r14, r24
 180:	ee 8d       	ldd	r30, Y+30	; 0x1e
 182:	ff 8d       	ldd	r31, Y+31	; 0x1f
 184:	80 81       	ld	r24, Z
 186:	c8 2a       	or	r12, r24
		const uint8_t bufferLen = self->msgBuffer.getLength(&self->msgBuffer);
 188:	e8 a9       	ldd	r30, Y+48	; 0x30
 18a:	f9 a9       	ldd	r31, Y+49	; 0x31
 18c:	c8 01       	movw	r24, r16
 18e:	09 95       	icall
		if(bufferLen == READ_CMD_LEN && cmd == READ_CMD) {
 190:	84 30       	cpi	r24, 0x04	; 4
 192:	81 f4       	brne	.+32     	; 0x1b4 <processAndRespondBuffer+0x84>
 194:	83 e1       	ldi	r24, 0x13	; 19
 196:	b8 12       	cpse	r11, r24
 198:	68 c0       	rjmp	.+208    	; 0x26a <processAndRespondBuffer+0x13a>
			SPI0.DATA = self->readByte(self, addr);
 19a:	fe 01       	movw	r30, r28
 19c:	ee 5b       	subi	r30, 0xBE	; 190
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	01 90       	ld	r0, Z+
 1a2:	f0 81       	ld	r31, Z
 1a4:	e0 2d       	mov	r30, r0
 1a6:	b7 01       	movw	r22, r14
 1a8:	a6 01       	movw	r20, r12
 1aa:	ce 01       	movw	r24, r28
 1ac:	09 95       	icall
 1ae:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
 1b2:	49 c0       	rjmp	.+146    	; 0x246 <processAndRespondBuffer+0x116>
			self->msgBuffer.reset(&self->msgBuffer);
		} else if(bufferLen == WRITE_CMD_LEN && cmd == WRITE_CMD) {
 1b4:	85 30       	cpi	r24, 0x05	; 5
 1b6:	89 f4       	brne	.+34     	; 0x1da <processAndRespondBuffer+0xaa>
 1b8:	a2 e1       	ldi	r26, 0x12	; 18
 1ba:	ba 12       	cpse	r11, r26
 1bc:	56 c0       	rjmp	.+172    	; 0x26a <processAndRespondBuffer+0x13a>
			const uint8_t data = *self->msgBuffer.PTR.param1;
 1be:	a8 a1       	ldd	r26, Y+32	; 0x20
 1c0:	b9 a1       	ldd	r27, Y+33	; 0x21
			self->writeByte(self, addr, data);
 1c2:	fe 01       	movw	r30, r28
 1c4:	ec 5b       	subi	r30, 0xBC	; 188
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	01 90       	ld	r0, Z+
 1ca:	f0 81       	ld	r31, Z
 1cc:	e0 2d       	mov	r30, r0
 1ce:	2c 91       	ld	r18, X
 1d0:	b7 01       	movw	r22, r14
 1d2:	a6 01       	movw	r20, r12
 1d4:	ce 01       	movw	r24, r28
 1d6:	09 95       	icall
 1d8:	36 c0       	rjmp	.+108    	; 0x246 <processAndRespondBuffer+0x116>
			self->msgBuffer.reset(&self->msgBuffer);
		} else if(bufferLen == READ_BURST_CMD_LEN && cmd == READ_BURST_CMD) {
 1da:	87 30       	cpi	r24, 0x07	; 7
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <processAndRespondBuffer+0xb0>
 1de:	45 c0       	rjmp	.+138    	; 0x26a <processAndRespondBuffer+0x13a>
 1e0:	b1 e1       	ldi	r27, 0x11	; 17
 1e2:	bb 12       	cpse	r11, r27
 1e4:	42 c0       	rjmp	.+132    	; 0x26a <processAndRespondBuffer+0x13a>
			const uint32_t addrTo = ( ((uint32_t)*self->msgBuffer.PTR.param1) << 16 ) | ( ((uint32_t)*self->msgBuffer.PTR.param2) << 8 ) | (*self->msgBuffer.PTR.param3);
 1e6:	e8 a1       	ldd	r30, Y+32	; 0x20
 1e8:	f9 a1       	ldd	r31, Y+33	; 0x21
 1ea:	80 81       	ld	r24, Z
 1ec:	ea a1       	ldd	r30, Y+34	; 0x22
 1ee:	fb a1       	ldd	r31, Y+35	; 0x23
 1f0:	40 80       	ld	r4, Z
 1f2:	51 2c       	mov	r5, r1
 1f4:	61 2c       	mov	r6, r1
 1f6:	71 2c       	mov	r7, r1
 1f8:	76 2c       	mov	r7, r6
 1fa:	65 2c       	mov	r6, r5
 1fc:	54 2c       	mov	r5, r4
 1fe:	44 24       	eor	r4, r4
 200:	68 2a       	or	r6, r24
 202:	ec a1       	ldd	r30, Y+36	; 0x24
 204:	fd a1       	ldd	r31, Y+37	; 0x25
 206:	80 81       	ld	r24, Z
 208:	48 2a       	or	r4, r24
			for(uint32_t i = addr; i <= addrTo; i++) {
				const uint8_t data = self->readByte(self, i);
 20a:	8e 01       	movw	r16, r28
 20c:	0e 5b       	subi	r16, 0xBE	; 190
 20e:	1f 4f       	sbci	r17, 0xFF	; 255
				self->burstReadQueue.push(&self->burstReadQueue, data);
 210:	5e 01       	movw	r10, r28
 212:	84 e3       	ldi	r24, 0x34	; 52
 214:	a8 0e       	add	r10, r24
 216:	b1 1c       	adc	r11, r1
			const uint8_t data = *self->msgBuffer.PTR.param1;
			self->writeByte(self, addr, data);
			self->msgBuffer.reset(&self->msgBuffer);
		} else if(bufferLen == READ_BURST_CMD_LEN && cmd == READ_BURST_CMD) {
			const uint32_t addrTo = ( ((uint32_t)*self->msgBuffer.PTR.param1) << 16 ) | ( ((uint32_t)*self->msgBuffer.PTR.param2) << 8 ) | (*self->msgBuffer.PTR.param3);
			for(uint32_t i = addr; i <= addrTo; i++) {
 218:	4c 14       	cp	r4, r12
 21a:	5d 04       	cpc	r5, r13
 21c:	6e 04       	cpc	r6, r14
 21e:	7f 04       	cpc	r7, r15
 220:	20 f1       	brcs	.+72     	; 0x26a <processAndRespondBuffer+0x13a>
				const uint8_t data = self->readByte(self, i);
 222:	d8 01       	movw	r26, r16
 224:	ed 91       	ld	r30, X+
 226:	fc 91       	ld	r31, X
 228:	b7 01       	movw	r22, r14
 22a:	a6 01       	movw	r20, r12
 22c:	ce 01       	movw	r24, r28
 22e:	09 95       	icall
				self->burstReadQueue.push(&self->burstReadQueue, data);
 230:	ea ad       	ldd	r30, Y+58	; 0x3a
 232:	fb ad       	ldd	r31, Y+59	; 0x3b
 234:	68 2f       	mov	r22, r24
 236:	c5 01       	movw	r24, r10
 238:	09 95       	icall
			const uint8_t data = *self->msgBuffer.PTR.param1;
			self->writeByte(self, addr, data);
			self->msgBuffer.reset(&self->msgBuffer);
		} else if(bufferLen == READ_BURST_CMD_LEN && cmd == READ_BURST_CMD) {
			const uint32_t addrTo = ( ((uint32_t)*self->msgBuffer.PTR.param1) << 16 ) | ( ((uint32_t)*self->msgBuffer.PTR.param2) << 8 ) | (*self->msgBuffer.PTR.param3);
			for(uint32_t i = addr; i <= addrTo; i++) {
 23a:	bf ef       	ldi	r27, 0xFF	; 255
 23c:	cb 1a       	sub	r12, r27
 23e:	db 0a       	sbc	r13, r27
 240:	eb 0a       	sbc	r14, r27
 242:	fb 0a       	sbc	r15, r27
 244:	e9 cf       	rjmp	.-46     	; 0x218 <processAndRespondBuffer+0xe8>
				const uint8_t data = self->readByte(self, i);
				self->burstReadQueue.push(&self->burstReadQueue, data);
			}
		}
	} else {
		self->msgBuffer.reset(&self->msgBuffer);
 246:	ea a9       	ldd	r30, Y+50	; 0x32
 248:	fb a9       	ldd	r31, Y+51	; 0x33
 24a:	c8 01       	movw	r24, r16
	}
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	bf 90       	pop	r11
 25e:	af 90       	pop	r10
 260:	7f 90       	pop	r7
 262:	6f 90       	pop	r6
 264:	5f 90       	pop	r5
 266:	4f 90       	pop	r4
				const uint8_t data = self->readByte(self, i);
				self->burstReadQueue.push(&self->burstReadQueue, data);
			}
		}
	} else {
		self->msgBuffer.reset(&self->msgBuffer);
 268:	09 94       	ijmp
	}
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	bf 90       	pop	r11
 27c:	af 90       	pop	r10
 27e:	7f 90       	pop	r7
 280:	6f 90       	pop	r6
 282:	5f 90       	pop	r5
 284:	4f 90       	pop	r4
 286:	08 95       	ret

00000288 <writeToAddrPort>:

#define READ_BURST_CMD		0x11
#define READ_BURST_CMD_LEN	7	/* [ID][ADDR1_MSB][ADDR1_MLSB][ADDR1_LSB][ADDR2_MSB][ADDR2_MLSB][ADDR2_LSB] */

void writeToAddrPort(DRAM_HANDLER *self, uint16_t addr) {
	self->ADDR_PORT.P1->OUT = (addr << ADDR_PORT1_SHIFT);
 288:	dc 01       	movw	r26, r24
 28a:	1e 96       	adiw	r26, 0x0e	; 14
 28c:	ed 91       	ld	r30, X+
 28e:	fc 91       	ld	r31, X
 290:	1f 97       	sbiw	r26, 0x0f	; 15
 292:	26 2f       	mov	r18, r22
 294:	22 95       	swap	r18
 296:	22 0f       	add	r18, r18
 298:	20 7e       	andi	r18, 0xE0	; 224
 29a:	24 83       	std	Z+4, r18	; 0x04
	self->ADDR_PORT.P2->OUT = (addr >> ADDR_PORT2_SHIFT);
 29c:	50 96       	adiw	r26, 0x10	; 16
 29e:	ed 91       	ld	r30, X+
 2a0:	fc 91       	ld	r31, X
 2a2:	51 97       	sbiw	r26, 0x11	; 17
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	76 95       	lsr	r23
 2a8:	67 95       	ror	r22
 2aa:	8a 95       	dec	r24
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <writeToAddrPort+0x1e>
 2ae:	64 83       	std	Z+4, r22	; 0x04
 2b0:	08 95       	ret

000002b2 <refreshRASonly>:
	self->OE.PORT->OUT &= ~self->OE.PIN;
	self->W.PORT->DIR |= self->W.PIN;
	self->W.PORT->OUT |= self->W.PIN;
}

void refreshRASonly(DRAM_HANDLER *self) {
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
	self->RAS.PORT->OUT |= self->RAS.PIN;
 2bc:	ea 81       	ldd	r30, Y+2	; 0x02
 2be:	fb 81       	ldd	r31, Y+3	; 0x03
 2c0:	94 81       	ldd	r25, Z+4	; 0x04
 2c2:	8c 81       	ldd	r24, Y+4	; 0x04
 2c4:	89 2b       	or	r24, r25
 2c6:	84 83       	std	Z+4, r24	; 0x04
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 2c8:	ed 81       	ldd	r30, Y+5	; 0x05
 2ca:	fe 81       	ldd	r31, Y+6	; 0x06
 2cc:	94 81       	ldd	r25, Z+4	; 0x04
 2ce:	8f 81       	ldd	r24, Y+7	; 0x07
 2d0:	80 95       	com	r24
 2d2:	89 23       	and	r24, r25
 2d4:	84 83       	std	Z+4, r24	; 0x04

	for(uint16_t row = 0; row < AMOUNT_OF_ROWS; row++) {
 2d6:	00 e0       	ldi	r16, 0x00	; 0
 2d8:	10 e0       	ldi	r17, 0x00	; 0
		self->CAS.PORT->OUT |= self->CAS.PIN;
 2da:	ed 81       	ldd	r30, Y+5	; 0x05
 2dc:	fe 81       	ldd	r31, Y+6	; 0x06
 2de:	94 81       	ldd	r25, Z+4	; 0x04
 2e0:	8f 81       	ldd	r24, Y+7	; 0x07
 2e2:	89 2b       	or	r24, r25
 2e4:	84 83       	std	Z+4, r24	; 0x04
		writeToAddrPort(self, row);
 2e6:	b8 01       	movw	r22, r16
 2e8:	ce 01       	movw	r24, r28
 2ea:	ce df       	rcall	.-100    	; 0x288 <writeToAddrPort>
		self->RAS.PORT->OUT &= ~self->RAS.PIN;
 2ec:	ea 81       	ldd	r30, Y+2	; 0x02
 2ee:	fb 81       	ldd	r31, Y+3	; 0x03
 2f0:	94 81       	ldd	r25, Z+4	; 0x04
 2f2:	8c 81       	ldd	r24, Y+4	; 0x04
 2f4:	80 95       	com	r24
 2f6:	89 23       	and	r24, r25
 2f8:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	8d e0       	ldi	r24, 0x0D	; 13
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <refreshRASonly+0x4a>
 300:	00 00       	nop
		
		_delay_us(2);
		
		self->RAS.PORT->OUT |= self->RAS.PIN;
 302:	ea 81       	ldd	r30, Y+2	; 0x02
 304:	fb 81       	ldd	r31, Y+3	; 0x03
 306:	94 81       	ldd	r25, Z+4	; 0x04
 308:	8c 81       	ldd	r24, Y+4	; 0x04
 30a:	89 2b       	or	r24, r25
 30c:	84 83       	std	Z+4, r24	; 0x04
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <refreshRASonly+0x5e>
 314:	00 c0       	rjmp	.+0      	; 0x316 <refreshRASonly+0x64>
		_delay_us(1);

		self->CAS.PORT->OUT &= ~self->CAS.PIN;
 316:	ed 81       	ldd	r30, Y+5	; 0x05
 318:	fe 81       	ldd	r31, Y+6	; 0x06
 31a:	94 81       	ldd	r25, Z+4	; 0x04
 31c:	8f 81       	ldd	r24, Y+7	; 0x07
 31e:	80 95       	com	r24
 320:	89 23       	and	r24, r25
 322:	84 83       	std	Z+4, r24	; 0x04
		self->CAS.PORT->OUT |= self->CAS.PIN;
 324:	ed 81       	ldd	r30, Y+5	; 0x05
 326:	fe 81       	ldd	r31, Y+6	; 0x06
 328:	94 81       	ldd	r25, Z+4	; 0x04
 32a:	8f 81       	ldd	r24, Y+7	; 0x07
 32c:	89 2b       	or	r24, r25
 32e:	84 83       	std	Z+4, r24	; 0x04
 330:	86 e0       	ldi	r24, 0x06	; 6
 332:	8a 95       	dec	r24
 334:	f1 f7       	brne	.-4      	; 0x332 <refreshRASonly+0x80>
 336:	00 c0       	rjmp	.+0      	; 0x338 <refreshRASonly+0x86>
		_delay_us(1);
		
		self->CAS.PORT->OUT &= ~self->CAS.PIN;
 338:	ed 81       	ldd	r30, Y+5	; 0x05
 33a:	fe 81       	ldd	r31, Y+6	; 0x06
 33c:	94 81       	ldd	r25, Z+4	; 0x04
 33e:	8f 81       	ldd	r24, Y+7	; 0x07
 340:	80 95       	com	r24
 342:	89 23       	and	r24, r25
 344:	84 83       	std	Z+4, r24	; 0x04

void refreshRASonly(DRAM_HANDLER *self) {
	self->RAS.PORT->OUT |= self->RAS.PIN;
	self->CAS.PORT->OUT &= ~self->CAS.PIN;

	for(uint16_t row = 0; row < AMOUNT_OF_ROWS; row++) {
 346:	0f 5f       	subi	r16, 0xFF	; 255
 348:	1f 4f       	sbci	r17, 0xFF	; 255
 34a:	01 15       	cp	r16, r1
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	18 07       	cpc	r17, r24
 350:	21 f6       	brne	.-120    	; 0x2da <refreshRASonly+0x28>
		self->CAS.PORT->OUT |= self->CAS.PIN;
		_delay_us(1);
		
		self->CAS.PORT->OUT &= ~self->CAS.PIN;
	}
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <readByte>:

uint8_t readByte(DRAM_HANDLER *self, uint32_t addr) {
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	ec 01       	movw	r28, r24
 36a:	6a 01       	movw	r12, r20
 36c:	7b 01       	movw	r14, r22
	cli();
 36e:	f8 94       	cli
	const uint16_t rowAddr = (addr & ADDR_MASK) >> HIGH_ADDR_SHIFT;
	const uint16_t colAddr = (addr & LOW_ADDR_MASK);
	self->DATA_PORT->DIR = 0;	/* Set DATA_PORT as input */
 370:	e8 81       	ld	r30, Y
 372:	f9 81       	ldd	r31, Y+1	; 0x01
 374:	10 82       	st	Z, r1
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 376:	ed 81       	ldd	r30, Y+5	; 0x05
 378:	fe 81       	ldd	r31, Y+6	; 0x06
 37a:	94 81       	ldd	r25, Z+4	; 0x04
 37c:	8f 81       	ldd	r24, Y+7	; 0x07
 37e:	89 2b       	or	r24, r25
 380:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, rowAddr);
 382:	db 01       	movw	r26, r22
 384:	ca 01       	movw	r24, r20
 386:	a3 70       	andi	r26, 0x03	; 3
 388:	bb 27       	eor	r27, r27
 38a:	bc 01       	movw	r22, r24
 38c:	cd 01       	movw	r24, r26
 38e:	29 e0       	ldi	r18, 0x09	; 9
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	77 95       	ror	r23
 396:	67 95       	ror	r22
 398:	2a 95       	dec	r18
 39a:	d1 f7       	brne	.-12     	; 0x390 <readByte+0x34>
 39c:	ce 01       	movw	r24, r28
 39e:	74 df       	rcall	.-280    	; 0x288 <writeToAddrPort>
	
	self->RAS.PORT->OUT &= ~self->RAS.PIN;
 3a0:	ea 81       	ldd	r30, Y+2	; 0x02
 3a2:	fb 81       	ldd	r31, Y+3	; 0x03
 3a4:	94 81       	ldd	r25, Z+4	; 0x04
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	80 95       	com	r24
 3aa:	89 23       	and	r24, r25
 3ac:	84 83       	std	Z+4, r24	; 0x04
	
	self->W.PORT->OUT |= self->W.PIN;
 3ae:	eb 85       	ldd	r30, Y+11	; 0x0b
 3b0:	fc 85       	ldd	r31, Y+12	; 0x0c
 3b2:	94 81       	ldd	r25, Z+4	; 0x04
 3b4:	8d 85       	ldd	r24, Y+13	; 0x0d
 3b6:	89 2b       	or	r24, r25
 3b8:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, colAddr);
 3ba:	b6 01       	movw	r22, r12
 3bc:	71 70       	andi	r23, 0x01	; 1
 3be:	ce 01       	movw	r24, r28
 3c0:	63 df       	rcall	.-314    	; 0x288 <writeToAddrPort>
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 3c2:	ed 81       	ldd	r30, Y+5	; 0x05
 3c4:	fe 81       	ldd	r31, Y+6	; 0x06
 3c6:	94 81       	ldd	r25, Z+4	; 0x04
 3c8:	8f 81       	ldd	r24, Y+7	; 0x07
 3ca:	80 95       	com	r24
 3cc:	89 23       	and	r24, r25
 3ce:	84 83       	std	Z+4, r24	; 0x04
	
	self->OE.PORT->OUT &= ~self->OE.PIN;
 3d0:	e8 85       	ldd	r30, Y+8	; 0x08
 3d2:	f9 85       	ldd	r31, Y+9	; 0x09
 3d4:	94 81       	ldd	r25, Z+4	; 0x04
 3d6:	8a 85       	ldd	r24, Y+10	; 0x0a
 3d8:	80 95       	com	r24
 3da:	89 23       	and	r24, r25
 3dc:	84 83       	std	Z+4, r24	; 0x04
	
	const uint8_t validDataOut = self->DATA_PORT->IN;
 3de:	e8 81       	ld	r30, Y
 3e0:	f9 81       	ldd	r31, Y+1	; 0x01
 3e2:	80 85       	ldd	r24, Z+8	; 0x08
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 3e4:	ed 81       	ldd	r30, Y+5	; 0x05
 3e6:	fe 81       	ldd	r31, Y+6	; 0x06
 3e8:	24 81       	ldd	r18, Z+4	; 0x04
 3ea:	9f 81       	ldd	r25, Y+7	; 0x07
 3ec:	92 2b       	or	r25, r18
 3ee:	94 83       	std	Z+4, r25	; 0x04
	self->RAS.PORT->OUT |= self->RAS.PIN;
 3f0:	ea 81       	ldd	r30, Y+2	; 0x02
 3f2:	fb 81       	ldd	r31, Y+3	; 0x03
 3f4:	24 81       	ldd	r18, Z+4	; 0x04
 3f6:	9c 81       	ldd	r25, Y+4	; 0x04
 3f8:	92 2b       	or	r25, r18
 3fa:	94 83       	std	Z+4, r25	; 0x04
	
	self->DATA_PORT->DIR = 0xFF; /* Set DATA_PORT to output */
 3fc:	e8 81       	ld	r30, Y
 3fe:	f9 81       	ldd	r31, Y+1	; 0x01
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	90 83       	st	Z, r25
	sei();
 404:	78 94       	sei

	return validDataOut;
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	08 95       	ret

00000414 <writeByte>:

void writeByte(DRAM_HANDLER *self, uint32_t addr, uint8_t data) {
 414:	cf 92       	push	r12
 416:	df 92       	push	r13
 418:	ef 92       	push	r14
 41a:	ff 92       	push	r15
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	ec 01       	movw	r28, r24
 424:	6a 01       	movw	r12, r20
 426:	7b 01       	movw	r14, r22
 428:	12 2f       	mov	r17, r18
	cli();
 42a:	f8 94       	cli
	const uint16_t rowAddr = (addr & ADDR_MASK) >> HIGH_ADDR_SHIFT;
	const uint16_t colAddr = (addr & LOW_ADDR_MASK);
	self->DATA_PORT->DIR = 0xFF; /* Set DATA_PORT as output */
 42c:	e8 81       	ld	r30, Y
 42e:	f9 81       	ldd	r31, Y+1	; 0x01
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	80 83       	st	Z, r24
	self->RAS.PORT->OUT |= self->RAS.PIN;
 434:	ea 81       	ldd	r30, Y+2	; 0x02
 436:	fb 81       	ldd	r31, Y+3	; 0x03
 438:	94 81       	ldd	r25, Z+4	; 0x04
 43a:	8c 81       	ldd	r24, Y+4	; 0x04
 43c:	89 2b       	or	r24, r25
 43e:	84 83       	std	Z+4, r24	; 0x04
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 440:	ed 81       	ldd	r30, Y+5	; 0x05
 442:	fe 81       	ldd	r31, Y+6	; 0x06
 444:	94 81       	ldd	r25, Z+4	; 0x04
 446:	8f 81       	ldd	r24, Y+7	; 0x07
 448:	89 2b       	or	r24, r25
 44a:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, rowAddr);
 44c:	db 01       	movw	r26, r22
 44e:	ca 01       	movw	r24, r20
 450:	a3 70       	andi	r26, 0x03	; 3
 452:	bb 27       	eor	r27, r27
 454:	bc 01       	movw	r22, r24
 456:	cd 01       	movw	r24, r26
 458:	29 e0       	ldi	r18, 0x09	; 9
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	2a 95       	dec	r18
 464:	d1 f7       	brne	.-12     	; 0x45a <writeByte+0x46>
 466:	ce 01       	movw	r24, r28
 468:	0f df       	rcall	.-482    	; 0x288 <writeToAddrPort>
	self->RAS.PORT->OUT &= ~self->RAS.PIN;
 46a:	ea 81       	ldd	r30, Y+2	; 0x02
 46c:	fb 81       	ldd	r31, Y+3	; 0x03
 46e:	94 81       	ldd	r25, Z+4	; 0x04
 470:	8c 81       	ldd	r24, Y+4	; 0x04
 472:	80 95       	com	r24
 474:	89 23       	and	r24, r25
 476:	84 83       	std	Z+4, r24	; 0x04
	
	self->OE.PORT->OUT |= self->OE.PIN;
 478:	e8 85       	ldd	r30, Y+8	; 0x08
 47a:	f9 85       	ldd	r31, Y+9	; 0x09
 47c:	94 81       	ldd	r25, Z+4	; 0x04
 47e:	8a 85       	ldd	r24, Y+10	; 0x0a
 480:	89 2b       	or	r24, r25
 482:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, colAddr);
 484:	b6 01       	movw	r22, r12
 486:	71 70       	andi	r23, 0x01	; 1
 488:	ce 01       	movw	r24, r28
 48a:	fe de       	rcall	.-516    	; 0x288 <writeToAddrPort>
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 48c:	ed 81       	ldd	r30, Y+5	; 0x05
 48e:	fe 81       	ldd	r31, Y+6	; 0x06
 490:	94 81       	ldd	r25, Z+4	; 0x04
 492:	8f 81       	ldd	r24, Y+7	; 0x07
 494:	80 95       	com	r24
 496:	89 23       	and	r24, r25
 498:	84 83       	std	Z+4, r24	; 0x04
	self->DATA_PORT->OUT = data;
 49a:	e8 81       	ld	r30, Y
 49c:	f9 81       	ldd	r31, Y+1	; 0x01
 49e:	14 83       	std	Z+4, r17	; 0x04
	self->W.PORT->OUT &= ~self->W.PIN;
 4a0:	eb 85       	ldd	r30, Y+11	; 0x0b
 4a2:	fc 85       	ldd	r31, Y+12	; 0x0c
 4a4:	94 81       	ldd	r25, Z+4	; 0x04
 4a6:	8d 85       	ldd	r24, Y+13	; 0x0d
 4a8:	80 95       	com	r24
 4aa:	89 23       	and	r24, r25
 4ac:	84 83       	std	Z+4, r24	; 0x04
	
	self->OE.PORT->OUT &= ~self->OE.PIN;
 4ae:	e8 85       	ldd	r30, Y+8	; 0x08
 4b0:	f9 85       	ldd	r31, Y+9	; 0x09
 4b2:	94 81       	ldd	r25, Z+4	; 0x04
 4b4:	8a 85       	ldd	r24, Y+10	; 0x0a
 4b6:	80 95       	com	r24
 4b8:	89 23       	and	r24, r25
 4ba:	84 83       	std	Z+4, r24	; 0x04
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 4bc:	ed 81       	ldd	r30, Y+5	; 0x05
 4be:	fe 81       	ldd	r31, Y+6	; 0x06
 4c0:	94 81       	ldd	r25, Z+4	; 0x04
 4c2:	8f 81       	ldd	r24, Y+7	; 0x07
 4c4:	89 2b       	or	r24, r25
 4c6:	84 83       	std	Z+4, r24	; 0x04
	self->RAS.PORT->OUT |= self->RAS.PIN;
 4c8:	ea 81       	ldd	r30, Y+2	; 0x02
 4ca:	fb 81       	ldd	r31, Y+3	; 0x03
 4cc:	94 81       	ldd	r25, Z+4	; 0x04
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	89 2b       	or	r24, r25
 4d2:	84 83       	std	Z+4, r24	; 0x04
	
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 4d4:	ed 81       	ldd	r30, Y+5	; 0x05
 4d6:	fe 81       	ldd	r31, Y+6	; 0x06
 4d8:	94 81       	ldd	r25, Z+4	; 0x04
 4da:	8f 81       	ldd	r24, Y+7	; 0x07
 4dc:	80 95       	com	r24
 4de:	89 23       	and	r24, r25
 4e0:	84 83       	std	Z+4, r24	; 0x04
	self->W.PORT->OUT |= self->W.PIN;
 4e2:	eb 85       	ldd	r30, Y+11	; 0x0b
 4e4:	fc 85       	ldd	r31, Y+12	; 0x0c
 4e6:	94 81       	ldd	r25, Z+4	; 0x04
 4e8:	8d 85       	ldd	r24, Y+13	; 0x0d
 4ea:	89 2b       	or	r24, r25
 4ec:	84 83       	std	Z+4, r24	; 0x04
	
	self->DATA_PORT->OUT = 0;
 4ee:	e8 81       	ld	r30, Y
 4f0:	f9 81       	ldd	r31, Y+1	; 0x01
 4f2:	14 82       	std	Z+4, r1	; 0x04

#define READ_BURST_CMD		0x11
#define READ_BURST_CMD_LEN	7	/* [ID][ADDR1_MSB][ADDR1_MLSB][ADDR1_LSB][ADDR2_MSB][ADDR2_MLSB][ADDR2_LSB] */

void writeToAddrPort(DRAM_HANDLER *self, uint16_t addr) {
	self->ADDR_PORT.P1->OUT = (addr << ADDR_PORT1_SHIFT);
 4f4:	ee 85       	ldd	r30, Y+14	; 0x0e
 4f6:	ff 85       	ldd	r31, Y+15	; 0x0f
 4f8:	14 82       	std	Z+4, r1	; 0x04
	self->ADDR_PORT.P2->OUT = (addr >> ADDR_PORT2_SHIFT);
 4fa:	e8 89       	ldd	r30, Y+16	; 0x10
 4fc:	f9 89       	ldd	r31, Y+17	; 0x11
 4fe:	14 82       	std	Z+4, r1	; 0x04
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
	self->W.PORT->OUT |= self->W.PIN;
	
	self->DATA_PORT->OUT = 0;
	writeToAddrPort(self, 0x00);
	sei();
 500:	78 94       	sei
}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	ff 90       	pop	r15
 50a:	ef 90       	pop	r14
 50c:	df 90       	pop	r13
 50e:	cf 90       	pop	r12
 510:	08 95       	ret

00000512 <resetPins>:
void writeToAddrPort(DRAM_HANDLER *self, uint16_t addr) {
	self->ADDR_PORT.P1->OUT = (addr << ADDR_PORT1_SHIFT);
	self->ADDR_PORT.P2->OUT = (addr >> ADDR_PORT2_SHIFT);
}

void resetPins(DRAM_HANDLER *self) {
 512:	fc 01       	movw	r30, r24
	self->RAS.PORT->DIR |= self->RAS.PIN;
 514:	a2 81       	ldd	r26, Z+2	; 0x02
 516:	b3 81       	ldd	r27, Z+3	; 0x03
 518:	9c 91       	ld	r25, X
 51a:	84 81       	ldd	r24, Z+4	; 0x04
 51c:	89 2b       	or	r24, r25
 51e:	8c 93       	st	X, r24
	self->RAS.PORT->OUT |= self->RAS.PIN;
 520:	a2 81       	ldd	r26, Z+2	; 0x02
 522:	b3 81       	ldd	r27, Z+3	; 0x03
 524:	14 96       	adiw	r26, 0x04	; 4
 526:	9c 91       	ld	r25, X
 528:	14 97       	sbiw	r26, 0x04	; 4
 52a:	84 81       	ldd	r24, Z+4	; 0x04
 52c:	89 2b       	or	r24, r25
 52e:	14 96       	adiw	r26, 0x04	; 4
 530:	8c 93       	st	X, r24
	self->CAS.PORT->DIR |= self->CAS.PIN;
 532:	a5 81       	ldd	r26, Z+5	; 0x05
 534:	b6 81       	ldd	r27, Z+6	; 0x06
 536:	9c 91       	ld	r25, X
 538:	87 81       	ldd	r24, Z+7	; 0x07
 53a:	89 2b       	or	r24, r25
 53c:	8c 93       	st	X, r24
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 53e:	a5 81       	ldd	r26, Z+5	; 0x05
 540:	b6 81       	ldd	r27, Z+6	; 0x06
 542:	14 96       	adiw	r26, 0x04	; 4
 544:	9c 91       	ld	r25, X
 546:	14 97       	sbiw	r26, 0x04	; 4
 548:	87 81       	ldd	r24, Z+7	; 0x07
 54a:	80 95       	com	r24
 54c:	89 23       	and	r24, r25
 54e:	14 96       	adiw	r26, 0x04	; 4
 550:	8c 93       	st	X, r24
	self->OE.PORT->DIR |= self->OE.PIN;
 552:	a0 85       	ldd	r26, Z+8	; 0x08
 554:	b1 85       	ldd	r27, Z+9	; 0x09
 556:	9c 91       	ld	r25, X
 558:	82 85       	ldd	r24, Z+10	; 0x0a
 55a:	89 2b       	or	r24, r25
 55c:	8c 93       	st	X, r24
	self->OE.PORT->OUT &= ~self->OE.PIN;
 55e:	a0 85       	ldd	r26, Z+8	; 0x08
 560:	b1 85       	ldd	r27, Z+9	; 0x09
 562:	14 96       	adiw	r26, 0x04	; 4
 564:	9c 91       	ld	r25, X
 566:	14 97       	sbiw	r26, 0x04	; 4
 568:	82 85       	ldd	r24, Z+10	; 0x0a
 56a:	80 95       	com	r24
 56c:	89 23       	and	r24, r25
 56e:	14 96       	adiw	r26, 0x04	; 4
 570:	8c 93       	st	X, r24
	self->W.PORT->DIR |= self->W.PIN;
 572:	a3 85       	ldd	r26, Z+11	; 0x0b
 574:	b4 85       	ldd	r27, Z+12	; 0x0c
 576:	9c 91       	ld	r25, X
 578:	85 85       	ldd	r24, Z+13	; 0x0d
 57a:	89 2b       	or	r24, r25
 57c:	8c 93       	st	X, r24
	self->W.PORT->OUT |= self->W.PIN;
 57e:	a3 85       	ldd	r26, Z+11	; 0x0b
 580:	b4 85       	ldd	r27, Z+12	; 0x0c
 582:	14 96       	adiw	r26, 0x04	; 4
 584:	9c 91       	ld	r25, X
 586:	14 97       	sbiw	r26, 0x04	; 4
 588:	85 85       	ldd	r24, Z+13	; 0x0d
 58a:	89 2b       	or	r24, r25
 58c:	14 96       	adiw	r26, 0x04	; 4
 58e:	8c 93       	st	X, r24
 590:	08 95       	ret

00000592 <initDRAMHandler>:
	} else {
		self->msgBuffer.reset(&self->msgBuffer);
	}
}

void initDRAMHandler(DRAM_HANDLER *self) {
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	ec 01       	movw	r28, r24
	initBuffer(&self->msgBuffer);
 598:	48 96       	adiw	r24, 0x18	; 24
 59a:	a5 dd       	rcall	.-1206   	; 0xe6 <initBuffer>
	initQueue(&self->burstReadQueue);
 59c:	ce 01       	movw	r24, r28
 59e:	c4 96       	adiw	r24, 0x34	; 52
 5a0:	53 d1       	rcall	.+678    	; 0x848 <initQueue>

	self->readByte = &readByte;
 5a2:	fe 01       	movw	r30, r28
 5a4:	ee 5b       	subi	r30, 0xBE	; 190
 5a6:	ff 4f       	sbci	r31, 0xFF	; 255
 5a8:	8e ea       	ldi	r24, 0xAE	; 174
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	80 83       	st	Z, r24
 5ae:	91 83       	std	Z+1, r25	; 0x01
	self->writeByte = &writeByte;
 5b0:	32 96       	adiw	r30, 0x02	; 2
 5b2:	8a e0       	ldi	r24, 0x0A	; 10
 5b4:	92 e0       	ldi	r25, 0x02	; 2
 5b6:	80 83       	st	Z, r24
 5b8:	91 83       	std	Z+1, r25	; 0x01
	self->refreshRASonly = &refreshRASonly;
 5ba:	32 96       	adiw	r30, 0x02	; 2
 5bc:	89 e5       	ldi	r24, 0x59	; 89
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	80 83       	st	Z, r24
 5c2:	91 83       	std	Z+1, r25	; 0x01
	self->processAndRespondBuffer = &processAndRespondBuffer;
 5c4:	32 96       	adiw	r30, 0x02	; 2
 5c6:	88 e9       	ldi	r24, 0x98	; 152
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	80 83       	st	Z, r24
 5cc:	91 83       	std	Z+1, r25	; 0x01
	
	self->hasPendingRefresh = false;
 5ce:	38 97       	sbiw	r30, 0x08	; 8
 5d0:	10 82       	st	Z, r1
	self->hasPendingBufferUpdate = false;
 5d2:	31 96       	adiw	r30, 0x01	; 1
 5d4:	10 82       	st	Z, r1
	
	self->DATA_PORT = &PORTD;
 5d6:	80 e6       	ldi	r24, 0x60	; 96
 5d8:	94 e0       	ldi	r25, 0x04	; 4
 5da:	88 83       	st	Y, r24
 5dc:	99 83       	std	Y+1, r25	; 0x01
	
	self->RAS.PORT = &PORTE;
 5de:	80 e8       	ldi	r24, 0x80	; 128
 5e0:	94 e0       	ldi	r25, 0x04	; 4
 5e2:	8a 83       	std	Y+2, r24	; 0x02
 5e4:	9b 83       	std	Y+3, r25	; 0x03
	self->RAS.PIN = PIN0_bm;
 5e6:	41 e0       	ldi	r20, 0x01	; 1
 5e8:	4c 83       	std	Y+4, r20	; 0x04

	self->CAS.PORT = &PORTE;
 5ea:	8d 83       	std	Y+5, r24	; 0x05
 5ec:	9e 83       	std	Y+6, r25	; 0x06
	self->CAS.PIN = PIN1_bm;
 5ee:	32 e0       	ldi	r19, 0x02	; 2
 5f0:	3f 83       	std	Y+7, r19	; 0x07
	
	self->OE.PORT = &PORTE;
 5f2:	88 87       	std	Y+8, r24	; 0x08
 5f4:	99 87       	std	Y+9, r25	; 0x09
	self->OE.PIN = PIN2_bm;
 5f6:	24 e0       	ldi	r18, 0x04	; 4
 5f8:	2a 87       	std	Y+10, r18	; 0x0a
	
	self->W.PORT = &PORTE;
 5fa:	8b 87       	std	Y+11, r24	; 0x0b
 5fc:	9c 87       	std	Y+12, r25	; 0x0c
	self->W.PIN = PIN3_bm;
 5fe:	88 e0       	ldi	r24, 0x08	; 8
 600:	8d 87       	std	Y+13, r24	; 0x0d
	
	self->ADDR_PORT.P1 = &PORTA;
 602:	e0 e0       	ldi	r30, 0x00	; 0
 604:	f4 e0       	ldi	r31, 0x04	; 4
 606:	ee 87       	std	Y+14, r30	; 0x0e
 608:	ff 87       	std	Y+15, r31	; 0x0f
	self->ADDR_PORT.P2 = &PORTB;
 60a:	60 e2       	ldi	r22, 0x20	; 32
 60c:	74 e0       	ldi	r23, 0x04	; 4
 60e:	68 8b       	std	Y+16, r22	; 0x10
 610:	79 8b       	std	Y+17, r23	; 0x11
	/* Set all address pins as output */
	self->ADDR_PORT.P1->DIR = 0xFF;
 612:	9f ef       	ldi	r25, 0xFF	; 255
 614:	90 83       	st	Z, r25
	self->ADDR_PORT.P2->DIR = 0xFF;
 616:	e8 89       	ldd	r30, Y+16	; 0x10
 618:	f9 89       	ldd	r31, Y+17	; 0x11
 61a:	90 83       	st	Z, r25
	
	self->SPI.PORT = &PORTC;
 61c:	e0 e4       	ldi	r30, 0x40	; 64
 61e:	f4 e0       	ldi	r31, 0x04	; 4
 620:	ea 8b       	std	Y+18, r30	; 0x12
 622:	fb 8b       	std	Y+19, r31	; 0x13
	self->SPI.MOSI = PIN0_bm;
 624:	4d 8b       	std	Y+21, r20	; 0x15
	self->SPI.MISO = PIN1_bm;
 626:	3e 8b       	std	Y+22, r19	; 0x16
	self->SPI.SCK = PIN2_bm;
 628:	2f 8b       	std	Y+23, r18	; 0x17
	self->SPI.SS = PIN3_bm;
 62a:	8c 8b       	std	Y+20, r24	; 0x14
	
	self->SPI.PORT->DIR |= self->SPI.MISO;
 62c:	80 81       	ld	r24, Z
 62e:	82 60       	ori	r24, 0x02	; 2
 630:	80 83       	st	Z, r24
	self->SPI.PORT->DIR &= ~self->SPI.MOSI;
 632:	ea 89       	ldd	r30, Y+18	; 0x12
 634:	fb 89       	ldd	r31, Y+19	; 0x13
 636:	90 81       	ld	r25, Z
 638:	8d 89       	ldd	r24, Y+21	; 0x15
 63a:	80 95       	com	r24
 63c:	89 23       	and	r24, r25
 63e:	80 83       	st	Z, r24
	self->SPI.PORT->DIR &= ~self->SPI.SS;
 640:	ea 89       	ldd	r30, Y+18	; 0x12
 642:	fb 89       	ldd	r31, Y+19	; 0x13
 644:	90 81       	ld	r25, Z
 646:	8c 89       	ldd	r24, Y+20	; 0x14
 648:	80 95       	com	r24
 64a:	89 23       	and	r24, r25
 64c:	80 83       	st	Z, r24
	self->SPI.PORT->DIR &= ~self->SPI.SCK;
 64e:	ea 89       	ldd	r30, Y+18	; 0x12
 650:	fb 89       	ldd	r31, Y+19	; 0x13
 652:	90 81       	ld	r25, Z
 654:	8f 89       	ldd	r24, Y+23	; 0x17
 656:	80 95       	com	r24
 658:	89 23       	and	r24, r25
 65a:	80 83       	st	Z, r24
	
	resetPins(self);
 65c:	ce 01       	movw	r24, r28
}
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
	self->SPI.PORT->DIR |= self->SPI.MISO;
	self->SPI.PORT->DIR &= ~self->SPI.MOSI;
	self->SPI.PORT->DIR &= ~self->SPI.SS;
	self->SPI.PORT->DIR &= ~self->SPI.SCK;
	
	resetPins(self);
 662:	57 cf       	rjmp	.-338    	; 0x512 <resetPins>

00000664 <__vector_9>:

#define RAM_READ_LENGTH		0xFF

DRAM_HANDLER dramHandler;

ISR(TCA0_CMP0_vect) {
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	8f 93       	push	r24
 670:	ef 93       	push	r30
 672:	ff 93       	push	r31
	dramHandler.hasPendingRefresh = true;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	80 93 41 3c 	sts	0x3C41, r24	; 0x803c41 <dramHandler+0x40>

	/* Clear interrupt flag */
	TCA0.SINGLE.INTFLAGS |= (1 << TCA_SINGLE_CMP0EN_bp);
 67a:	e0 e0       	ldi	r30, 0x00	; 0
 67c:	fa e0       	ldi	r31, 0x0A	; 10
 67e:	83 85       	ldd	r24, Z+11	; 0x0b
 680:	80 61       	ori	r24, 0x10	; 16
 682:	83 87       	std	Z+11, r24	; 0x0b
}
 684:	ff 91       	pop	r31
 686:	ef 91       	pop	r30
 688:	8f 91       	pop	r24
 68a:	0f 90       	pop	r0
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <__vector_16>:

ISR(SPI0_INT_vect) {
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	2f 93       	push	r18
 6a0:	3f 93       	push	r19
 6a2:	4f 93       	push	r20
 6a4:	5f 93       	push	r21
 6a6:	6f 93       	push	r22
 6a8:	7f 93       	push	r23
 6aa:	8f 93       	push	r24
 6ac:	9f 93       	push	r25
 6ae:	af 93       	push	r26
 6b0:	bf 93       	push	r27
 6b2:	cf 93       	push	r28
 6b4:	ef 93       	push	r30
 6b6:	ff 93       	push	r31
	if(SPI0.INTFLAGS & SPI_RXCIE_bm) {
 6b8:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__RODATA_PM_OFFSET__+0x7fc8c3>
 6bc:	87 ff       	sbrs	r24, 7
 6be:	20 c0       	rjmp	.+64     	; 0x700 <__vector_16+0x6c>
		const uint8_t data = SPI0.DATA;
 6c0:	c0 91 c4 08 	lds	r28, 0x08C4	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
		if(!dramHandler.burstReadQueue.isEmpty(&dramHandler.burstReadQueue)) {
 6c4:	e0 91 3f 3c 	lds	r30, 0x3C3F	; 0x803c3f <dramHandler+0x3e>
 6c8:	f0 91 40 3c 	lds	r31, 0x3C40	; 0x803c40 <dramHandler+0x3f>
 6cc:	85 e3       	ldi	r24, 0x35	; 53
 6ce:	9c e3       	ldi	r25, 0x3C	; 60
 6d0:	09 95       	icall
 6d2:	81 11       	cpse	r24, r1
 6d4:	0a c0       	rjmp	.+20     	; 0x6ea <__vector_16+0x56>
			const uint8_t data = dramHandler.burstReadQueue.pop(&dramHandler.burstReadQueue);
 6d6:	e0 91 3d 3c 	lds	r30, 0x3C3D	; 0x803c3d <dramHandler+0x3c>
 6da:	f0 91 3e 3c 	lds	r31, 0x3C3E	; 0x803c3e <dramHandler+0x3d>
 6de:	85 e3       	ldi	r24, 0x35	; 53
 6e0:	9c e3       	ldi	r25, 0x3C	; 60
 6e2:	09 95       	icall
			SPI0.DATA = data;
 6e4:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
 6e8:	0b c0       	rjmp	.+22     	; 0x700 <__vector_16+0x6c>
		} else {
			dramHandler.msgBuffer.push(&dramHandler.msgBuffer, data);
 6ea:	e0 91 2f 3c 	lds	r30, 0x3C2F	; 0x803c2f <dramHandler+0x2e>
 6ee:	f0 91 30 3c 	lds	r31, 0x3C30	; 0x803c30 <dramHandler+0x2f>
 6f2:	6c 2f       	mov	r22, r28
 6f4:	89 e1       	ldi	r24, 0x19	; 25
 6f6:	9c e3       	ldi	r25, 0x3C	; 60
 6f8:	09 95       	icall
			dramHandler.hasPendingBufferUpdate = true;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	80 93 42 3c 	sts	0x3C42, r24	; 0x803c42 <dramHandler+0x41>
		}
	}
}
 700:	ff 91       	pop	r31
 702:	ef 91       	pop	r30
 704:	cf 91       	pop	r28
 706:	bf 91       	pop	r27
 708:	af 91       	pop	r26
 70a:	9f 91       	pop	r25
 70c:	8f 91       	pop	r24
 70e:	7f 91       	pop	r23
 710:	6f 91       	pop	r22
 712:	5f 91       	pop	r21
 714:	4f 91       	pop	r20
 716:	3f 91       	pop	r19
 718:	2f 91       	pop	r18
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	0f 90       	pop	r0
 720:	1f 90       	pop	r1
 722:	18 95       	reti

00000724 <initTimer0>:

void initTimer0() {
	/* Set Prescaler */
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV16_gc;
 724:	e0 e0       	ldi	r30, 0x00	; 0
 726:	fa e0       	ldi	r31, 0x0A	; 10
 728:	88 e0       	ldi	r24, 0x08	; 8
 72a:	80 83       	st	Z, r24
	/* Set to Frequency Mode */
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_FRQ_gc;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	81 83       	std	Z+1, r24	; 0x01
	/* Set CMP value */
	TCA0.SINGLE.CMP0BUF = TIM0_COMP_VAL;
 730:	8e e3       	ldi	r24, 0x3E	; 62
 732:	99 e4       	ldi	r25, 0x49	; 73
 734:	80 af       	std	Z+56, r24	; 0x38
 736:	91 af       	std	Z+57, r25	; 0x39
	/* Enable Compare Channel 0 Interrupt */
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0EN_bm;
 738:	80 e1       	ldi	r24, 0x10	; 16
 73a:	82 87       	std	Z+10, r24	; 0x0a
	/* Enable TCA0 */
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
 73c:	80 81       	ld	r24, Z
 73e:	81 60       	ori	r24, 0x01	; 1
 740:	80 83       	st	Z, r24
 742:	08 95       	ret

00000744 <initSPI>:
}

void initSPI() {
	/* Set alternative SPI pins */
	PORTMUX.TWISPIROUTEA |= PORTMUX_SPI0_ALT1_gc;
 744:	e0 ee       	ldi	r30, 0xE0	; 224
 746:	f5 e0       	ldi	r31, 0x05	; 5
 748:	83 81       	ldd	r24, Z+3	; 0x03
 74a:	81 60       	ori	r24, 0x01	; 1
 74c:	83 83       	std	Z+3, r24	; 0x03
	/* Enable Buffer Mode */
	SPI0.CTRLB = SPI_BUFEN_bm;
 74e:	e0 ec       	ldi	r30, 0xC0	; 192
 750:	f8 e0       	ldi	r31, 0x08	; 8
 752:	90 e8       	ldi	r25, 0x80	; 128
 754:	91 83       	std	Z+1, r25	; 0x01
	/* Directly write to Shift reg */
	SPI0.CTRLB |= SPI_BUFWR_bm;
 756:	81 81       	ldd	r24, Z+1	; 0x01
 758:	80 64       	ori	r24, 0x40	; 64
 75a:	81 83       	std	Z+1, r24	; 0x01
	/* Enable Receive Interrupt */
	SPI0.INTCTRL = SPI_RXCIE_bm;
 75c:	92 83       	std	Z+2, r25	; 0x02
	//SPI0.INTCTRL |= SPI_TXCIE_bm;
	/* Enable SPI */
	SPI0.CTRLA |= SPI_ENABLE_bm;
 75e:	80 81       	ld	r24, Z
 760:	81 60       	ori	r24, 0x01	; 1
 762:	80 83       	st	Z, r24
 764:	08 95       	ret

00000766 <initCPU>:
}

void initCPU() {
	/* Disable Configuration Change Protection */
	CCP = 0xD8;
 766:	88 ed       	ldi	r24, 0xD8	; 216
 768:	84 bf       	out	0x34, r24	; 52
	/* Set Clock source to 20MHz internal oscillator */
	CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_OSC20M_gc;
 76a:	e0 e6       	ldi	r30, 0x60	; 96
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	10 82       	st	Z, r1
	/* Disable Configuration Change Protection */
	CCP = 0xD8;
 770:	84 bf       	out	0x34, r24	; 52
	/* Disable prescaler */
	CLKCTRL.MCLKCTRLB &= ~(1 << CLKCTRL_PEN_bp);
 772:	81 81       	ldd	r24, Z+1	; 0x01
 774:	8e 7f       	andi	r24, 0xFE	; 254
 776:	81 83       	std	Z+1, r24	; 0x01
	
	/* Enable interrupts globally */
	sei();
 778:	78 94       	sei
 77a:	08 95       	ret

0000077c <main>:
}

int main(void) {
	initDRAMHandler(&dramHandler);
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	9c e3       	ldi	r25, 0x3C	; 60
 780:	08 df       	rcall	.-496    	; 0x592 <initDRAMHandler>

	initCPU();
 782:	f1 df       	rcall	.-30     	; 0x766 <initCPU>
	initSPI();
 784:	df df       	rcall	.-66     	; 0x744 <initSPI>
	initTimer0();
 786:	ce df       	rcall	.-100    	; 0x724 <initTimer0>
	
    while (1) {
		if(dramHandler.hasPendingRefresh) {
 788:	80 91 41 3c 	lds	r24, 0x3C41	; 0x803c41 <dramHandler+0x40>
 78c:	88 23       	and	r24, r24
 78e:	49 f0       	breq	.+18     	; 0x7a2 <main+0x26>
			dramHandler.refreshRASonly(&dramHandler);
 790:	e0 91 47 3c 	lds	r30, 0x3C47	; 0x803c47 <dramHandler+0x46>
 794:	f0 91 48 3c 	lds	r31, 0x3C48	; 0x803c48 <dramHandler+0x47>
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	9c e3       	ldi	r25, 0x3C	; 60
 79c:	09 95       	icall
			dramHandler.hasPendingRefresh = false;
 79e:	10 92 41 3c 	sts	0x3C41, r1	; 0x803c41 <dramHandler+0x40>
		}
		if(dramHandler.hasPendingBufferUpdate) {
 7a2:	80 91 42 3c 	lds	r24, 0x3C42	; 0x803c42 <dramHandler+0x41>
 7a6:	88 23       	and	r24, r24
 7a8:	79 f3       	breq	.-34     	; 0x788 <main+0xc>
			dramHandler.processAndRespondBuffer(&dramHandler);
 7aa:	e0 91 49 3c 	lds	r30, 0x3C49	; 0x803c49 <dramHandler+0x48>
 7ae:	f0 91 4a 3c 	lds	r31, 0x3C4A	; 0x803c4a <dramHandler+0x49>
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	9c e3       	ldi	r25, 0x3C	; 60
 7b6:	09 95       	icall
			dramHandler.hasPendingBufferUpdate = false;
 7b8:	10 92 42 3c 	sts	0x3C42, r1	; 0x803c42 <dramHandler+0x41>
 7bc:	e5 cf       	rjmp	.-54     	; 0x788 <main+0xc>

000007be <pushFunc>:

QUEUE_ITEM queueItems[QUEUE_ITEM_STORAGE_SIZE];

uint8_t currentQueueItemsIdx = 0;

void pushFunc(QUEUE *self, uint8_t data) {
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	00 d0       	rcall	.+0      	; 0x7c4 <pushFunc+0x6>
 7c4:	1f 92       	push	r1
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	fc 01       	movw	r30, r24
	if(self->length < QUEUE_ITEM_STORAGE_SIZE) {
 7cc:	85 81       	ldd	r24, Z+5	; 0x05
 7ce:	8f 3f       	cpi	r24, 0xFF	; 255
 7d0:	a9 f0       	breq	.+42     	; 0x7fc <pushFunc+0x3e>
		QUEUE_ITEM item = queueItems[currentQueueItemsIdx];
 7d2:	80 91 00 3c 	lds	r24, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
 7d6:	90 e0       	ldi	r25, 0x00	; 0
		item.next = NULL;
		item.data = data;
		
		self->end->next = &item;
 7d8:	a3 81       	ldd	r26, Z+3	; 0x03
 7da:	b4 81       	ldd	r27, Z+4	; 0x04
 7dc:	9e 01       	movw	r18, r28
 7de:	2f 5f       	subi	r18, 0xFF	; 255
 7e0:	3f 4f       	sbci	r19, 0xFF	; 255
 7e2:	2d 93       	st	X+, r18
 7e4:	3c 93       	st	X, r19
		self->end = &item;
 7e6:	23 83       	std	Z+3, r18	; 0x03
 7e8:	34 83       	std	Z+4, r19	; 0x04
		
		currentQueueItemsIdx = (currentQueueItemsIdx + 1) % QUEUE_ITEM_STORAGE_SIZE;
 7ea:	01 96       	adiw	r24, 0x01	; 1
 7ec:	6f ef       	ldi	r22, 0xFF	; 255
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	3e d0       	rcall	.+124    	; 0x86e <__divmodhi4>
 7f2:	80 93 00 3c 	sts	0x3C00, r24	; 0x803c00 <__DATA_REGION_ORIGIN__>
		
		self->length++;
 7f6:	85 81       	ldd	r24, Z+5	; 0x05
 7f8:	8f 5f       	subi	r24, 0xFF	; 255
 7fa:	85 83       	std	Z+5, r24	; 0x05
	}
}
 7fc:	23 96       	adiw	r28, 0x03	; 3
 7fe:	cd bf       	out	0x3d, r28	; 61
 800:	de bf       	out	0x3e, r29	; 62
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <popFunc>:

uint8_t popFunc(QUEUE *self) {
 808:	fc 01       	movw	r30, r24
	if(self->length > 0) {
 80a:	85 81       	ldd	r24, Z+5	; 0x05
 80c:	88 23       	and	r24, r24
 80e:	a1 f0       	breq	.+40     	; 0x838 <popFunc+0x30>
		const uint8_t data = self->root.next->data;
 810:	a0 81       	ld	r26, Z
 812:	b1 81       	ldd	r27, Z+1	; 0x01
 814:	12 96       	adiw	r26, 0x02	; 2
 816:	2c 91       	ld	r18, X
 818:	12 97       	sbiw	r26, 0x02	; 2
		self->root.next = self->root.next->next;
		
		if(self->length == 1) {
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	29 f0       	breq	.+10     	; 0x828 <popFunc+0x20>
}

uint8_t popFunc(QUEUE *self) {
	if(self->length > 0) {
		const uint8_t data = self->root.next->data;
		self->root.next = self->root.next->next;
 81e:	4d 91       	ld	r20, X+
 820:	5c 91       	ld	r21, X
 822:	40 83       	st	Z, r20
 824:	51 83       	std	Z+1, r21	; 0x01
 826:	04 c0       	rjmp	.+8      	; 0x830 <popFunc+0x28>
		
		if(self->length == 1) {
			self->root.next = NULL;
 828:	10 82       	st	Z, r1
 82a:	11 82       	std	Z+1, r1	; 0x01
			self->end = &self->root;
 82c:	e3 83       	std	Z+3, r30	; 0x03
 82e:	f4 83       	std	Z+4, r31	; 0x04
		}
		
		self->length--;
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	98 0f       	add	r25, r24
 834:	95 83       	std	Z+5, r25	; 0x05
		
		return data;
 836:	82 2f       	mov	r24, r18
	}
	
	return 0;
}
 838:	08 95       	ret

0000083a <isEmptyFunc>:

bool isEmptyFunc(QUEUE *self) {
	return self->length == 0;
 83a:	21 e0       	ldi	r18, 0x01	; 1
 83c:	fc 01       	movw	r30, r24
 83e:	85 81       	ldd	r24, Z+5	; 0x05
 840:	81 11       	cpse	r24, r1
 842:	20 e0       	ldi	r18, 0x00	; 0
}
 844:	82 2f       	mov	r24, r18
 846:	08 95       	ret

00000848 <initQueue>:

void initQueue(QUEUE *self) {
 848:	fc 01       	movw	r30, r24
	self->isEmpty = &isEmptyFunc;
 84a:	8d e1       	ldi	r24, 0x1D	; 29
 84c:	94 e0       	ldi	r25, 0x04	; 4
 84e:	82 87       	std	Z+10, r24	; 0x0a
 850:	93 87       	std	Z+11, r25	; 0x0b
	self->push = &pushFunc;
 852:	8f ed       	ldi	r24, 0xDF	; 223
 854:	93 e0       	ldi	r25, 0x03	; 3
 856:	86 83       	std	Z+6, r24	; 0x06
 858:	97 83       	std	Z+7, r25	; 0x07
	self->pop = &popFunc;
 85a:	84 e0       	ldi	r24, 0x04	; 4
 85c:	94 e0       	ldi	r25, 0x04	; 4
 85e:	80 87       	std	Z+8, r24	; 0x08
 860:	91 87       	std	Z+9, r25	; 0x09
	
	self->root.next = NULL;
 862:	10 82       	st	Z, r1
 864:	11 82       	std	Z+1, r1	; 0x01
	self->end = &self->root;
 866:	e3 83       	std	Z+3, r30	; 0x03
 868:	f4 83       	std	Z+4, r31	; 0x04
	
	self->length = 0;
 86a:	15 82       	std	Z+5, r1	; 0x05
 86c:	08 95       	ret

0000086e <__divmodhi4>:
 86e:	97 fb       	bst	r25, 7
 870:	07 2e       	mov	r0, r23
 872:	16 f4       	brtc	.+4      	; 0x878 <__divmodhi4+0xa>
 874:	00 94       	com	r0
 876:	06 d0       	rcall	.+12     	; 0x884 <__divmodhi4_neg1>
 878:	77 fd       	sbrc	r23, 7
 87a:	08 d0       	rcall	.+16     	; 0x88c <__divmodhi4_neg2>
 87c:	0b d0       	rcall	.+22     	; 0x894 <__udivmodhi4>
 87e:	07 fc       	sbrc	r0, 7
 880:	05 d0       	rcall	.+10     	; 0x88c <__divmodhi4_neg2>
 882:	3e f4       	brtc	.+14     	; 0x892 <__divmodhi4_exit>

00000884 <__divmodhi4_neg1>:
 884:	90 95       	com	r25
 886:	81 95       	neg	r24
 888:	9f 4f       	sbci	r25, 0xFF	; 255
 88a:	08 95       	ret

0000088c <__divmodhi4_neg2>:
 88c:	70 95       	com	r23
 88e:	61 95       	neg	r22
 890:	7f 4f       	sbci	r23, 0xFF	; 255

00000892 <__divmodhi4_exit>:
 892:	08 95       	ret

00000894 <__udivmodhi4>:
 894:	aa 1b       	sub	r26, r26
 896:	bb 1b       	sub	r27, r27
 898:	51 e1       	ldi	r21, 0x11	; 17
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <__udivmodhi4_ep>

0000089c <__udivmodhi4_loop>:
 89c:	aa 1f       	adc	r26, r26
 89e:	bb 1f       	adc	r27, r27
 8a0:	a6 17       	cp	r26, r22
 8a2:	b7 07       	cpc	r27, r23
 8a4:	10 f0       	brcs	.+4      	; 0x8aa <__udivmodhi4_ep>
 8a6:	a6 1b       	sub	r26, r22
 8a8:	b7 0b       	sbc	r27, r23

000008aa <__udivmodhi4_ep>:
 8aa:	88 1f       	adc	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	5a 95       	dec	r21
 8b0:	a9 f7       	brne	.-22     	; 0x89c <__udivmodhi4_loop>
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	bc 01       	movw	r22, r24
 8b8:	cd 01       	movw	r24, r26
 8ba:	08 95       	ret

000008bc <_exit>:
 8bc:	f8 94       	cli

000008be <__stop_program>:
 8be:	ff cf       	rjmp	.-2      	; 0x8be <__stop_program>
