
ATmega809.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803c00  00803c00  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00803c00  00803c00  0000073c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f76  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002757  00000000  00000000  000047b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000895  00000000  00000000  00006f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000077a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018c5  00000000  00000000  000079e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000917  00000000  00000000  000092a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00009bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_9>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_16>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_clear_bss>:
  ac:	2c e3       	ldi	r18, 0x3C	; 60
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	bc e3       	ldi	r27, 0x3C	; 60
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a8 33       	cpi	r26, 0x38	; 56
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	ef d2       	rcall	.+1502   	; 0x69c <main>
  be:	02 c3       	rjmp	.+1540   	; 0x6c4 <_exit>

000000c0 <__bad_interrupt>:
  c0:	9f cf       	rjmp	.-194    	; 0x0 <__vectors>

000000c2 <processAndRespondBuffer>:
	
	self->DATA_PORT->OUT = 0;
	writeToAddrPort(self, 0x00);
}

void processAndRespondBuffer(DRAM_HANDLER *self) {
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	const uint32_t addr = ( ((uint32_t)*self->buffer.PTR.addr1) << 16 ) | ( ((uint32_t)*self->buffer.PTR.addr2) << 8 ) | (*self->buffer.PTR.addr3);
  d4:	ea 8d       	ldd	r30, Y+26	; 0x1a
  d6:	fb 8d       	ldd	r31, Y+27	; 0x1b
  d8:	80 81       	ld	r24, Z
  da:	ec 8d       	ldd	r30, Y+28	; 0x1c
  dc:	fd 8d       	ldd	r31, Y+29	; 0x1d
  de:	c0 80       	ld	r12, Z
  e0:	d1 2c       	mov	r13, r1
  e2:	e1 2c       	mov	r14, r1
  e4:	f1 2c       	mov	r15, r1
  e6:	fe 2c       	mov	r15, r14
  e8:	ed 2c       	mov	r14, r13
  ea:	dc 2c       	mov	r13, r12
  ec:	cc 24       	eor	r12, r12
  ee:	e8 2a       	or	r14, r24
  f0:	ee 8d       	ldd	r30, Y+30	; 0x1e
  f2:	ff 8d       	ldd	r31, Y+31	; 0x1f
  f4:	80 81       	ld	r24, Z
  f6:	c8 2a       	or	r12, r24
	const uint8_t bufferLen = self->buffer.getLength(&self->buffer);
  f8:	8e 01       	movw	r16, r28
  fa:	08 5e       	subi	r16, 0xE8	; 232
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
  fe:	ea a5       	ldd	r30, Y+42	; 0x2a
 100:	fb a5       	ldd	r31, Y+43	; 0x2b
 102:	c8 01       	movw	r24, r16
 104:	09 95       	icall

	if(bufferLen == READ_CMD_LEN && *self->buffer.PTR.cmd) {
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	71 f4       	brne	.+28     	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
 10a:	e8 8d       	ldd	r30, Y+24	; 0x18
 10c:	f9 8d       	ldd	r31, Y+25	; 0x19
 10e:	80 81       	ld	r24, Z
 110:	88 23       	and	r24, r24
 112:	c9 f0       	breq	.+50     	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
		const uint8_t data = self->readByte(self, addr);
 114:	e8 a9       	ldd	r30, Y+48	; 0x30
 116:	f9 a9       	ldd	r31, Y+49	; 0x31
 118:	b7 01       	movw	r22, r14
 11a:	a6 01       	movw	r20, r12
 11c:	ce 01       	movw	r24, r28
 11e:	09 95       	icall
		SPI0.DATA = data;
 120:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>

void processAndRespondBuffer(DRAM_HANDLER *self) {
	const uint32_t addr = ( ((uint32_t)*self->buffer.PTR.addr1) << 16 ) | ( ((uint32_t)*self->buffer.PTR.addr2) << 8 ) | (*self->buffer.PTR.addr3);
	const uint8_t bufferLen = self->buffer.getLength(&self->buffer);

	if(bufferLen == READ_CMD_LEN && *self->buffer.PTR.cmd) {
 124:	10 c0       	rjmp	.+32     	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
		const uint8_t data = self->readByte(self, addr);
		SPI0.DATA = data;
	} else if(bufferLen == WRITE_CMD_LEN && *self->buffer.PTR.cmd == WRITE_CMD) {
 126:	85 30       	cpi	r24, 0x05	; 5
 128:	71 f4       	brne	.+28     	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
 12a:	e8 8d       	ldd	r30, Y+24	; 0x18
 12c:	f9 8d       	ldd	r31, Y+25	; 0x19
 12e:	80 81       	ld	r24, Z
 130:	82 31       	cpi	r24, 0x12	; 18
 132:	49 f4       	brne	.+18     	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
		const uint8_t data = *self->buffer.PTR.param1;
 134:	a8 a1       	ldd	r26, Y+32	; 0x20
 136:	b9 a1       	ldd	r27, Y+33	; 0x21
		self->writeByte(self, addr, data);
 138:	ea a9       	ldd	r30, Y+50	; 0x32
 13a:	fb a9       	ldd	r31, Y+51	; 0x33
 13c:	2c 91       	ld	r18, X
 13e:	b7 01       	movw	r22, r14
 140:	a6 01       	movw	r20, r12
 142:	ce 01       	movw	r24, r28
 144:	09 95       	icall
	}
	
	self->buffer.reset(&self->buffer);
 146:	ec a5       	ldd	r30, Y+44	; 0x2c
 148:	fd a5       	ldd	r31, Y+45	; 0x2d
 14a:	c8 01       	movw	r24, r16
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	df 90       	pop	r13
 15a:	cf 90       	pop	r12
	} else if(bufferLen == WRITE_CMD_LEN && *self->buffer.PTR.cmd == WRITE_CMD) {
		const uint8_t data = *self->buffer.PTR.param1;
		self->writeByte(self, addr, data);
	}
	
	self->buffer.reset(&self->buffer);
 15c:	09 94       	ijmp

0000015e <writeToAddrPort>:

#define WRITE_CMD		0x12
#define WRITE_CMD_LEN	5

void writeToAddrPort(DRAM_HANDLER *self, uint16_t addr) {
	self->ADDR_PORT.P1->OUT = (addr << ADDR_PORT1_SHIFT);
 15e:	dc 01       	movw	r26, r24
 160:	1e 96       	adiw	r26, 0x0e	; 14
 162:	ed 91       	ld	r30, X+
 164:	fc 91       	ld	r31, X
 166:	1f 97       	sbiw	r26, 0x0f	; 15
 168:	26 2f       	mov	r18, r22
 16a:	22 95       	swap	r18
 16c:	22 0f       	add	r18, r18
 16e:	20 7e       	andi	r18, 0xE0	; 224
 170:	24 83       	std	Z+4, r18	; 0x04
	self->ADDR_PORT.P2->OUT = (addr >> ADDR_PORT2_SHIFT);
 172:	50 96       	adiw	r26, 0x10	; 16
 174:	ed 91       	ld	r30, X+
 176:	fc 91       	ld	r31, X
 178:	51 97       	sbiw	r26, 0x11	; 17
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	76 95       	lsr	r23
 17e:	67 95       	ror	r22
 180:	8a 95       	dec	r24
 182:	e1 f7       	brne	.-8      	; 0x17c <writeToAddrPort+0x1e>
 184:	64 83       	std	Z+4, r22	; 0x04
 186:	08 95       	ret

00000188 <refreshRASonly>:
	self->OE.PORT->OUT &= ~self->OE.PIN;
	self->W.PORT->DIR |= self->W.PIN;
	self->W.PORT->OUT |= self->W.PIN;
}

void refreshRASonly(DRAM_HANDLER *self) {
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
	self->RAS.PORT->OUT |= self->RAS.PIN;
 192:	ea 81       	ldd	r30, Y+2	; 0x02
 194:	fb 81       	ldd	r31, Y+3	; 0x03
 196:	94 81       	ldd	r25, Z+4	; 0x04
 198:	8c 81       	ldd	r24, Y+4	; 0x04
 19a:	89 2b       	or	r24, r25
 19c:	84 83       	std	Z+4, r24	; 0x04
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 19e:	ed 81       	ldd	r30, Y+5	; 0x05
 1a0:	fe 81       	ldd	r31, Y+6	; 0x06
 1a2:	94 81       	ldd	r25, Z+4	; 0x04
 1a4:	8f 81       	ldd	r24, Y+7	; 0x07
 1a6:	80 95       	com	r24
 1a8:	89 23       	and	r24, r25
 1aa:	84 83       	std	Z+4, r24	; 0x04

	for(uint16_t row = 0; row < AMOUNT_OF_ROWS; row++) {
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
		self->CAS.PORT->OUT |= self->CAS.PIN;
 1b0:	ed 81       	ldd	r30, Y+5	; 0x05
 1b2:	fe 81       	ldd	r31, Y+6	; 0x06
 1b4:	94 81       	ldd	r25, Z+4	; 0x04
 1b6:	8f 81       	ldd	r24, Y+7	; 0x07
 1b8:	89 2b       	or	r24, r25
 1ba:	84 83       	std	Z+4, r24	; 0x04
		writeToAddrPort(self, row);
 1bc:	b8 01       	movw	r22, r16
 1be:	ce 01       	movw	r24, r28
 1c0:	ce df       	rcall	.-100    	; 0x15e <writeToAddrPort>
		self->RAS.PORT->OUT &= ~self->RAS.PIN;
 1c2:	ea 81       	ldd	r30, Y+2	; 0x02
 1c4:	fb 81       	ldd	r31, Y+3	; 0x03
 1c6:	94 81       	ldd	r25, Z+4	; 0x04
 1c8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ca:	80 95       	com	r24
 1cc:	89 23       	and	r24, r25
 1ce:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <refreshRASonly+0x4a>
 1d6:	00 00       	nop
		
		_delay_us(2);
		
		self->RAS.PORT->OUT |= self->RAS.PIN;
 1d8:	ea 81       	ldd	r30, Y+2	; 0x02
 1da:	fb 81       	ldd	r31, Y+3	; 0x03
 1dc:	94 81       	ldd	r25, Z+4	; 0x04
 1de:	8c 81       	ldd	r24, Y+4	; 0x04
 1e0:	89 2b       	or	r24, r25
 1e2:	84 83       	std	Z+4, r24	; 0x04
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <refreshRASonly+0x5e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <refreshRASonly+0x64>
		_delay_us(1);

		self->CAS.PORT->OUT &= ~self->CAS.PIN;
 1ec:	ed 81       	ldd	r30, Y+5	; 0x05
 1ee:	fe 81       	ldd	r31, Y+6	; 0x06
 1f0:	94 81       	ldd	r25, Z+4	; 0x04
 1f2:	8f 81       	ldd	r24, Y+7	; 0x07
 1f4:	80 95       	com	r24
 1f6:	89 23       	and	r24, r25
 1f8:	84 83       	std	Z+4, r24	; 0x04
		self->CAS.PORT->OUT |= self->CAS.PIN;
 1fa:	ed 81       	ldd	r30, Y+5	; 0x05
 1fc:	fe 81       	ldd	r31, Y+6	; 0x06
 1fe:	94 81       	ldd	r25, Z+4	; 0x04
 200:	8f 81       	ldd	r24, Y+7	; 0x07
 202:	89 2b       	or	r24, r25
 204:	84 83       	std	Z+4, r24	; 0x04
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	8a 95       	dec	r24
 20a:	f1 f7       	brne	.-4      	; 0x208 <refreshRASonly+0x80>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <refreshRASonly+0x86>
		_delay_us(1);
		
		self->CAS.PORT->OUT &= ~self->CAS.PIN;
 20e:	ed 81       	ldd	r30, Y+5	; 0x05
 210:	fe 81       	ldd	r31, Y+6	; 0x06
 212:	94 81       	ldd	r25, Z+4	; 0x04
 214:	8f 81       	ldd	r24, Y+7	; 0x07
 216:	80 95       	com	r24
 218:	89 23       	and	r24, r25
 21a:	84 83       	std	Z+4, r24	; 0x04

void refreshRASonly(DRAM_HANDLER *self) {
	self->RAS.PORT->OUT |= self->RAS.PIN;
	self->CAS.PORT->OUT &= ~self->CAS.PIN;

	for(uint16_t row = 0; row < AMOUNT_OF_ROWS; row++) {
 21c:	0f 5f       	subi	r16, 0xFF	; 255
 21e:	1f 4f       	sbci	r17, 0xFF	; 255
 220:	01 15       	cp	r16, r1
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	18 07       	cpc	r17, r24
 226:	21 f6       	brne	.-120    	; 0x1b0 <refreshRASonly+0x28>
		self->CAS.PORT->OUT |= self->CAS.PIN;
		_delay_us(1);
		
		self->CAS.PORT->OUT &= ~self->CAS.PIN;
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <readByte>:

uint8_t readByte(DRAM_HANDLER *self, uint32_t addr) {
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
 240:	6a 01       	movw	r12, r20
 242:	7b 01       	movw	r14, r22
	const uint16_t rowAddr = (addr & ADDR_MASK) >> HIGH_ADDR_SHIFT;
	const uint16_t colAddr = (addr & LOW_ADDR_MASK);
	self->DATA_PORT->DIR = 0;	/* Set DATA_PORT as input */
 244:	e8 81       	ld	r30, Y
 246:	f9 81       	ldd	r31, Y+1	; 0x01
 248:	10 82       	st	Z, r1
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 24a:	ed 81       	ldd	r30, Y+5	; 0x05
 24c:	fe 81       	ldd	r31, Y+6	; 0x06
 24e:	94 81       	ldd	r25, Z+4	; 0x04
 250:	8f 81       	ldd	r24, Y+7	; 0x07
 252:	89 2b       	or	r24, r25
 254:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, rowAddr);
 256:	db 01       	movw	r26, r22
 258:	ca 01       	movw	r24, r20
 25a:	a3 70       	andi	r26, 0x03	; 3
 25c:	bb 27       	eor	r27, r27
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	29 e0       	ldi	r18, 0x09	; 9
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	77 95       	ror	r23
 26a:	67 95       	ror	r22
 26c:	2a 95       	dec	r18
 26e:	d1 f7       	brne	.-12     	; 0x264 <readByte+0x32>
 270:	ce 01       	movw	r24, r28
 272:	75 df       	rcall	.-278    	; 0x15e <writeToAddrPort>
	
	self->RAS.PORT->OUT &= ~self->RAS.PIN;
 274:	ea 81       	ldd	r30, Y+2	; 0x02
 276:	fb 81       	ldd	r31, Y+3	; 0x03
 278:	94 81       	ldd	r25, Z+4	; 0x04
 27a:	8c 81       	ldd	r24, Y+4	; 0x04
 27c:	80 95       	com	r24
 27e:	89 23       	and	r24, r25
 280:	84 83       	std	Z+4, r24	; 0x04
	
	self->W.PORT->OUT |= self->W.PIN;
 282:	eb 85       	ldd	r30, Y+11	; 0x0b
 284:	fc 85       	ldd	r31, Y+12	; 0x0c
 286:	94 81       	ldd	r25, Z+4	; 0x04
 288:	8d 85       	ldd	r24, Y+13	; 0x0d
 28a:	89 2b       	or	r24, r25
 28c:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, colAddr);
 28e:	b6 01       	movw	r22, r12
 290:	71 70       	andi	r23, 0x01	; 1
 292:	ce 01       	movw	r24, r28
 294:	64 df       	rcall	.-312    	; 0x15e <writeToAddrPort>
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 296:	ed 81       	ldd	r30, Y+5	; 0x05
 298:	fe 81       	ldd	r31, Y+6	; 0x06
 29a:	94 81       	ldd	r25, Z+4	; 0x04
 29c:	8f 81       	ldd	r24, Y+7	; 0x07
 29e:	80 95       	com	r24
 2a0:	89 23       	and	r24, r25
 2a2:	84 83       	std	Z+4, r24	; 0x04
	
	self->OE.PORT->OUT &= ~self->OE.PIN;
 2a4:	e8 85       	ldd	r30, Y+8	; 0x08
 2a6:	f9 85       	ldd	r31, Y+9	; 0x09
 2a8:	94 81       	ldd	r25, Z+4	; 0x04
 2aa:	8a 85       	ldd	r24, Y+10	; 0x0a
 2ac:	80 95       	com	r24
 2ae:	89 23       	and	r24, r25
 2b0:	84 83       	std	Z+4, r24	; 0x04
	
	const uint8_t validDataOut = self->DATA_PORT->IN;
 2b2:	e8 81       	ld	r30, Y
 2b4:	f9 81       	ldd	r31, Y+1	; 0x01
 2b6:	80 85       	ldd	r24, Z+8	; 0x08
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 2b8:	ed 81       	ldd	r30, Y+5	; 0x05
 2ba:	fe 81       	ldd	r31, Y+6	; 0x06
 2bc:	24 81       	ldd	r18, Z+4	; 0x04
 2be:	9f 81       	ldd	r25, Y+7	; 0x07
 2c0:	92 2b       	or	r25, r18
 2c2:	94 83       	std	Z+4, r25	; 0x04
	self->RAS.PORT->OUT |= self->RAS.PIN;
 2c4:	ea 81       	ldd	r30, Y+2	; 0x02
 2c6:	fb 81       	ldd	r31, Y+3	; 0x03
 2c8:	24 81       	ldd	r18, Z+4	; 0x04
 2ca:	9c 81       	ldd	r25, Y+4	; 0x04
 2cc:	92 2b       	or	r25, r18
 2ce:	94 83       	std	Z+4, r25	; 0x04
	
	self->DATA_PORT->DIR = 0xFF; /* Set DATA_PORT to output */
 2d0:	e8 81       	ld	r30, Y
 2d2:	f9 81       	ldd	r31, Y+1	; 0x01
 2d4:	9f ef       	ldi	r25, 0xFF	; 255
 2d6:	90 83       	st	Z, r25
	
	return validDataOut;
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	df 90       	pop	r13
 2e2:	cf 90       	pop	r12
 2e4:	08 95       	ret

000002e6 <writeByte>:

void writeByte(DRAM_HANDLER *self, uint32_t addr, uint8_t data) {
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	ec 01       	movw	r28, r24
 2f6:	6a 01       	movw	r12, r20
 2f8:	7b 01       	movw	r14, r22
 2fa:	12 2f       	mov	r17, r18
	const uint16_t rowAddr = (addr & ADDR_MASK) >> HIGH_ADDR_SHIFT;
	const uint16_t colAddr = (addr & LOW_ADDR_MASK);
	self->DATA_PORT->DIR = 0xFF; /* Set DATA_PORT as output */
 2fc:	e8 81       	ld	r30, Y
 2fe:	f9 81       	ldd	r31, Y+1	; 0x01
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	80 83       	st	Z, r24
	self->RAS.PORT->OUT |= self->RAS.PIN;
 304:	ea 81       	ldd	r30, Y+2	; 0x02
 306:	fb 81       	ldd	r31, Y+3	; 0x03
 308:	94 81       	ldd	r25, Z+4	; 0x04
 30a:	8c 81       	ldd	r24, Y+4	; 0x04
 30c:	89 2b       	or	r24, r25
 30e:	84 83       	std	Z+4, r24	; 0x04
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 310:	ed 81       	ldd	r30, Y+5	; 0x05
 312:	fe 81       	ldd	r31, Y+6	; 0x06
 314:	94 81       	ldd	r25, Z+4	; 0x04
 316:	8f 81       	ldd	r24, Y+7	; 0x07
 318:	89 2b       	or	r24, r25
 31a:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, rowAddr);
 31c:	db 01       	movw	r26, r22
 31e:	ca 01       	movw	r24, r20
 320:	a3 70       	andi	r26, 0x03	; 3
 322:	bb 27       	eor	r27, r27
 324:	bc 01       	movw	r22, r24
 326:	cd 01       	movw	r24, r26
 328:	29 e0       	ldi	r18, 0x09	; 9
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	77 95       	ror	r23
 330:	67 95       	ror	r22
 332:	2a 95       	dec	r18
 334:	d1 f7       	brne	.-12     	; 0x32a <writeByte+0x44>
 336:	ce 01       	movw	r24, r28
 338:	12 df       	rcall	.-476    	; 0x15e <writeToAddrPort>
	self->RAS.PORT->OUT &= ~self->RAS.PIN;
 33a:	ea 81       	ldd	r30, Y+2	; 0x02
 33c:	fb 81       	ldd	r31, Y+3	; 0x03
 33e:	94 81       	ldd	r25, Z+4	; 0x04
 340:	8c 81       	ldd	r24, Y+4	; 0x04
 342:	80 95       	com	r24
 344:	89 23       	and	r24, r25
 346:	84 83       	std	Z+4, r24	; 0x04
	
	self->OE.PORT->OUT |= self->OE.PIN;
 348:	e8 85       	ldd	r30, Y+8	; 0x08
 34a:	f9 85       	ldd	r31, Y+9	; 0x09
 34c:	94 81       	ldd	r25, Z+4	; 0x04
 34e:	8a 85       	ldd	r24, Y+10	; 0x0a
 350:	89 2b       	or	r24, r25
 352:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, colAddr);
 354:	b6 01       	movw	r22, r12
 356:	71 70       	andi	r23, 0x01	; 1
 358:	ce 01       	movw	r24, r28
 35a:	01 df       	rcall	.-510    	; 0x15e <writeToAddrPort>
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 35c:	ed 81       	ldd	r30, Y+5	; 0x05
 35e:	fe 81       	ldd	r31, Y+6	; 0x06
 360:	94 81       	ldd	r25, Z+4	; 0x04
 362:	8f 81       	ldd	r24, Y+7	; 0x07
 364:	80 95       	com	r24
 366:	89 23       	and	r24, r25
 368:	84 83       	std	Z+4, r24	; 0x04
	self->DATA_PORT->OUT = data;
 36a:	e8 81       	ld	r30, Y
 36c:	f9 81       	ldd	r31, Y+1	; 0x01
 36e:	14 83       	std	Z+4, r17	; 0x04
	self->W.PORT->OUT &= ~self->W.PIN;
 370:	eb 85       	ldd	r30, Y+11	; 0x0b
 372:	fc 85       	ldd	r31, Y+12	; 0x0c
 374:	94 81       	ldd	r25, Z+4	; 0x04
 376:	8d 85       	ldd	r24, Y+13	; 0x0d
 378:	80 95       	com	r24
 37a:	89 23       	and	r24, r25
 37c:	84 83       	std	Z+4, r24	; 0x04
	
	self->OE.PORT->OUT &= ~self->OE.PIN;
 37e:	e8 85       	ldd	r30, Y+8	; 0x08
 380:	f9 85       	ldd	r31, Y+9	; 0x09
 382:	94 81       	ldd	r25, Z+4	; 0x04
 384:	8a 85       	ldd	r24, Y+10	; 0x0a
 386:	80 95       	com	r24
 388:	89 23       	and	r24, r25
 38a:	84 83       	std	Z+4, r24	; 0x04
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 38c:	ed 81       	ldd	r30, Y+5	; 0x05
 38e:	fe 81       	ldd	r31, Y+6	; 0x06
 390:	94 81       	ldd	r25, Z+4	; 0x04
 392:	8f 81       	ldd	r24, Y+7	; 0x07
 394:	89 2b       	or	r24, r25
 396:	84 83       	std	Z+4, r24	; 0x04
	self->RAS.PORT->OUT |= self->RAS.PIN;
 398:	ea 81       	ldd	r30, Y+2	; 0x02
 39a:	fb 81       	ldd	r31, Y+3	; 0x03
 39c:	94 81       	ldd	r25, Z+4	; 0x04
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	89 2b       	or	r24, r25
 3a2:	84 83       	std	Z+4, r24	; 0x04
	
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 3a4:	ed 81       	ldd	r30, Y+5	; 0x05
 3a6:	fe 81       	ldd	r31, Y+6	; 0x06
 3a8:	94 81       	ldd	r25, Z+4	; 0x04
 3aa:	8f 81       	ldd	r24, Y+7	; 0x07
 3ac:	80 95       	com	r24
 3ae:	89 23       	and	r24, r25
 3b0:	84 83       	std	Z+4, r24	; 0x04
	self->W.PORT->OUT |= self->W.PIN;
 3b2:	eb 85       	ldd	r30, Y+11	; 0x0b
 3b4:	fc 85       	ldd	r31, Y+12	; 0x0c
 3b6:	94 81       	ldd	r25, Z+4	; 0x04
 3b8:	8d 85       	ldd	r24, Y+13	; 0x0d
 3ba:	89 2b       	or	r24, r25
 3bc:	84 83       	std	Z+4, r24	; 0x04
	
	self->DATA_PORT->OUT = 0;
 3be:	e8 81       	ld	r30, Y
 3c0:	f9 81       	ldd	r31, Y+1	; 0x01
 3c2:	14 82       	std	Z+4, r1	; 0x04

#define WRITE_CMD		0x12
#define WRITE_CMD_LEN	5

void writeToAddrPort(DRAM_HANDLER *self, uint16_t addr) {
	self->ADDR_PORT.P1->OUT = (addr << ADDR_PORT1_SHIFT);
 3c4:	ee 85       	ldd	r30, Y+14	; 0x0e
 3c6:	ff 85       	ldd	r31, Y+15	; 0x0f
 3c8:	14 82       	std	Z+4, r1	; 0x04
	self->ADDR_PORT.P2->OUT = (addr >> ADDR_PORT2_SHIFT);
 3ca:	e8 89       	ldd	r30, Y+16	; 0x10
 3cc:	f9 89       	ldd	r31, Y+17	; 0x11
 3ce:	14 82       	std	Z+4, r1	; 0x04
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
	self->W.PORT->OUT |= self->W.PIN;
	
	self->DATA_PORT->OUT = 0;
	writeToAddrPort(self, 0x00);
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	ff 90       	pop	r15
 3d8:	ef 90       	pop	r14
 3da:	df 90       	pop	r13
 3dc:	cf 90       	pop	r12
 3de:	08 95       	ret

000003e0 <resetPins>:
void writeToAddrPort(DRAM_HANDLER *self, uint16_t addr) {
	self->ADDR_PORT.P1->OUT = (addr << ADDR_PORT1_SHIFT);
	self->ADDR_PORT.P2->OUT = (addr >> ADDR_PORT2_SHIFT);
}

void resetPins(DRAM_HANDLER *self) {
 3e0:	fc 01       	movw	r30, r24
	self->RAS.PORT->DIR |= self->RAS.PIN;
 3e2:	a2 81       	ldd	r26, Z+2	; 0x02
 3e4:	b3 81       	ldd	r27, Z+3	; 0x03
 3e6:	9c 91       	ld	r25, X
 3e8:	84 81       	ldd	r24, Z+4	; 0x04
 3ea:	89 2b       	or	r24, r25
 3ec:	8c 93       	st	X, r24
	self->RAS.PORT->OUT |= self->RAS.PIN;
 3ee:	a2 81       	ldd	r26, Z+2	; 0x02
 3f0:	b3 81       	ldd	r27, Z+3	; 0x03
 3f2:	14 96       	adiw	r26, 0x04	; 4
 3f4:	9c 91       	ld	r25, X
 3f6:	14 97       	sbiw	r26, 0x04	; 4
 3f8:	84 81       	ldd	r24, Z+4	; 0x04
 3fa:	89 2b       	or	r24, r25
 3fc:	14 96       	adiw	r26, 0x04	; 4
 3fe:	8c 93       	st	X, r24
	self->CAS.PORT->DIR |= self->CAS.PIN;
 400:	a5 81       	ldd	r26, Z+5	; 0x05
 402:	b6 81       	ldd	r27, Z+6	; 0x06
 404:	9c 91       	ld	r25, X
 406:	87 81       	ldd	r24, Z+7	; 0x07
 408:	89 2b       	or	r24, r25
 40a:	8c 93       	st	X, r24
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 40c:	a5 81       	ldd	r26, Z+5	; 0x05
 40e:	b6 81       	ldd	r27, Z+6	; 0x06
 410:	14 96       	adiw	r26, 0x04	; 4
 412:	9c 91       	ld	r25, X
 414:	14 97       	sbiw	r26, 0x04	; 4
 416:	87 81       	ldd	r24, Z+7	; 0x07
 418:	80 95       	com	r24
 41a:	89 23       	and	r24, r25
 41c:	14 96       	adiw	r26, 0x04	; 4
 41e:	8c 93       	st	X, r24
	self->OE.PORT->DIR |= self->OE.PIN;
 420:	a0 85       	ldd	r26, Z+8	; 0x08
 422:	b1 85       	ldd	r27, Z+9	; 0x09
 424:	9c 91       	ld	r25, X
 426:	82 85       	ldd	r24, Z+10	; 0x0a
 428:	89 2b       	or	r24, r25
 42a:	8c 93       	st	X, r24
	self->OE.PORT->OUT &= ~self->OE.PIN;
 42c:	a0 85       	ldd	r26, Z+8	; 0x08
 42e:	b1 85       	ldd	r27, Z+9	; 0x09
 430:	14 96       	adiw	r26, 0x04	; 4
 432:	9c 91       	ld	r25, X
 434:	14 97       	sbiw	r26, 0x04	; 4
 436:	82 85       	ldd	r24, Z+10	; 0x0a
 438:	80 95       	com	r24
 43a:	89 23       	and	r24, r25
 43c:	14 96       	adiw	r26, 0x04	; 4
 43e:	8c 93       	st	X, r24
	self->W.PORT->DIR |= self->W.PIN;
 440:	a3 85       	ldd	r26, Z+11	; 0x0b
 442:	b4 85       	ldd	r27, Z+12	; 0x0c
 444:	9c 91       	ld	r25, X
 446:	85 85       	ldd	r24, Z+13	; 0x0d
 448:	89 2b       	or	r24, r25
 44a:	8c 93       	st	X, r24
	self->W.PORT->OUT |= self->W.PIN;
 44c:	a3 85       	ldd	r26, Z+11	; 0x0b
 44e:	b4 85       	ldd	r27, Z+12	; 0x0c
 450:	14 96       	adiw	r26, 0x04	; 4
 452:	9c 91       	ld	r25, X
 454:	14 97       	sbiw	r26, 0x04	; 4
 456:	85 85       	ldd	r24, Z+13	; 0x0d
 458:	89 2b       	or	r24, r25
 45a:	14 96       	adiw	r26, 0x04	; 4
 45c:	8c 93       	st	X, r24
 45e:	08 95       	ret

00000460 <initDRAMHandler>:
	}
	
	self->buffer.reset(&self->buffer);
}

void initDRAMHandler(DRAM_HANDLER *self) {
 460:	fc 01       	movw	r30, r24
	self->readByte = &readByte;
 462:	89 e1       	ldi	r24, 0x19	; 25
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	80 ab       	std	Z+48, r24	; 0x30
 468:	91 ab       	std	Z+49, r25	; 0x31
	self->writeByte = &writeByte;
 46a:	83 e7       	ldi	r24, 0x73	; 115
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	82 ab       	std	Z+50, r24	; 0x32
 470:	93 ab       	std	Z+51, r25	; 0x33
	self->refreshRASonly = &refreshRASonly;
 472:	84 ec       	ldi	r24, 0xC4	; 196
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	84 ab       	std	Z+52, r24	; 0x34
 478:	95 ab       	std	Z+53, r25	; 0x35
	self->processAndRespondBuffer = &processAndRespondBuffer;
 47a:	81 e6       	ldi	r24, 0x61	; 97
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	86 ab       	std	Z+54, r24	; 0x36
 480:	97 ab       	std	Z+55, r25	; 0x37
	
	self->hasPendingRefresh = false;
 482:	16 a6       	std	Z+46, r1	; 0x2e
	self->hasPendingBufferUpdate = false;
 484:	17 a6       	std	Z+47, r1	; 0x2f
	
	self->DATA_PORT = &PORTD;
 486:	80 e6       	ldi	r24, 0x60	; 96
 488:	94 e0       	ldi	r25, 0x04	; 4
 48a:	80 83       	st	Z, r24
 48c:	91 83       	std	Z+1, r25	; 0x01
	
	self->RAS.PORT = &PORTE;
 48e:	80 e8       	ldi	r24, 0x80	; 128
 490:	94 e0       	ldi	r25, 0x04	; 4
 492:	82 83       	std	Z+2, r24	; 0x02
 494:	93 83       	std	Z+3, r25	; 0x03
	self->RAS.PIN = PIN0_bm;
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	44 83       	std	Z+4, r20	; 0x04

	self->CAS.PORT = &PORTE;
 49a:	85 83       	std	Z+5, r24	; 0x05
 49c:	96 83       	std	Z+6, r25	; 0x06
	self->CAS.PIN = PIN1_bm;
 49e:	32 e0       	ldi	r19, 0x02	; 2
 4a0:	37 83       	std	Z+7, r19	; 0x07
	
	self->OE.PORT = &PORTE;
 4a2:	80 87       	std	Z+8, r24	; 0x08
 4a4:	91 87       	std	Z+9, r25	; 0x09
	self->OE.PIN = PIN2_bm;
 4a6:	24 e0       	ldi	r18, 0x04	; 4
 4a8:	22 87       	std	Z+10, r18	; 0x0a
	
	self->W.PORT = &PORTE;
 4aa:	83 87       	std	Z+11, r24	; 0x0b
 4ac:	94 87       	std	Z+12, r25	; 0x0c
	self->W.PIN = PIN3_bm;
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	85 87       	std	Z+13, r24	; 0x0d
	
	self->ADDR_PORT.P1 = &PORTA;
 4b2:	a0 e0       	ldi	r26, 0x00	; 0
 4b4:	b4 e0       	ldi	r27, 0x04	; 4
 4b6:	a6 87       	std	Z+14, r26	; 0x0e
 4b8:	b7 87       	std	Z+15, r27	; 0x0f
	self->ADDR_PORT.P2 = &PORTB;
 4ba:	60 e2       	ldi	r22, 0x20	; 32
 4bc:	74 e0       	ldi	r23, 0x04	; 4
 4be:	60 8b       	std	Z+16, r22	; 0x10
 4c0:	71 8b       	std	Z+17, r23	; 0x11
	/* Set all address pins as output */
	self->ADDR_PORT.P1->DIR = 0xFF;
 4c2:	9f ef       	ldi	r25, 0xFF	; 255
 4c4:	9c 93       	st	X, r25
	self->ADDR_PORT.P2->DIR = 0xFF;
 4c6:	a0 89       	ldd	r26, Z+16	; 0x10
 4c8:	b1 89       	ldd	r27, Z+17	; 0x11
 4ca:	9c 93       	st	X, r25
	
	self->SPI.PORT = &PORTC;
 4cc:	a0 e4       	ldi	r26, 0x40	; 64
 4ce:	b4 e0       	ldi	r27, 0x04	; 4
 4d0:	a2 8b       	std	Z+18, r26	; 0x12
 4d2:	b3 8b       	std	Z+19, r27	; 0x13
	self->SPI.MOSI = PIN0_bm;
 4d4:	45 8b       	std	Z+21, r20	; 0x15
	self->SPI.MISO = PIN1_bm;
 4d6:	36 8b       	std	Z+22, r19	; 0x16
	self->SPI.SCK = PIN2_bm;
 4d8:	27 8b       	std	Z+23, r18	; 0x17
	self->SPI.SS = PIN3_bm;
 4da:	84 8b       	std	Z+20, r24	; 0x14
	
	self->SPI.PORT->DIR |= self->SPI.MISO;
 4dc:	8c 91       	ld	r24, X
 4de:	82 60       	ori	r24, 0x02	; 2
 4e0:	8c 93       	st	X, r24
	
	resetPins(self);
 4e2:	cf 01       	movw	r24, r30
 4e4:	7d cf       	rjmp	.-262    	; 0x3e0 <resetPins>

000004e6 <__vector_9>:

#define RAM_READ_LENGTH		0xFF

DRAM_HANDLER dramHandler;

ISR(TCA0_CMP0_vect) {
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	cf 92       	push	r12
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	2f 93       	push	r18
 4fe:	3f 93       	push	r19
 500:	4f 93       	push	r20
 502:	5f 93       	push	r21
 504:	6f 93       	push	r22
 506:	7f 93       	push	r23
 508:	8f 93       	push	r24
 50a:	9f 93       	push	r25
 50c:	af 93       	push	r26
 50e:	bf 93       	push	r27
 510:	ef 93       	push	r30
 512:	ff 93       	push	r31
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	cf 5f       	subi	r28, 0xFF	; 255
 51e:	d1 09       	sbc	r29, r1
 520:	cd bf       	out	0x3d, r28	; 61
 522:	de bf       	out	0x3e, r29	; 62
 524:	c1 2c       	mov	r12, r1
 526:	d1 2c       	mov	r13, r1
 528:	76 01       	movw	r14, r12
	for(uint8_t i = 0; i < RAM_READ_LENGTH; i++) {
		dramHandler.writeByte(&dramHandler, i, i % 5);
 52a:	15 e0       	ldi	r17, 0x05	; 5
 52c:	8c 2d       	mov	r24, r12
 52e:	61 2f       	mov	r22, r17
 530:	bd d0       	rcall	.+378    	; 0x6ac <__udivmodqi4>
 532:	e0 91 32 3c 	lds	r30, 0x3C32	; 0x803c32 <__DATA_REGION_ORIGIN__+0x32>
 536:	f0 91 33 3c 	lds	r31, 0x3C33	; 0x803c33 <__DATA_REGION_ORIGIN__+0x33>
 53a:	29 2f       	mov	r18, r25
 53c:	b7 01       	movw	r22, r14
 53e:	a6 01       	movw	r20, r12
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	9c e3       	ldi	r25, 0x3C	; 60
 544:	09 95       	icall
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	c8 1a       	sub	r12, r24
 54a:	d8 0a       	sbc	r13, r24
 54c:	e8 0a       	sbc	r14, r24
 54e:	f8 0a       	sbc	r15, r24
#define RAM_READ_LENGTH		0xFF

DRAM_HANDLER dramHandler;

ISR(TCA0_CMP0_vect) {
	for(uint8_t i = 0; i < RAM_READ_LENGTH; i++) {
 550:	ef ef       	ldi	r30, 0xFF	; 255
 552:	ce 16       	cp	r12, r30
 554:	d1 04       	cpc	r13, r1
 556:	e1 04       	cpc	r14, r1
 558:	f1 04       	cpc	r15, r1
 55a:	41 f7       	brne	.-48     	; 0x52c <__vector_9+0x46>
 55c:	c1 2c       	mov	r12, r1
 55e:	d1 2c       	mov	r13, r1
 560:	76 01       	movw	r14, r12
		dramHandler.writeByte(&dramHandler, i, i % 5);
	}

	volatile uint8_t vals[0xFF];
	for(uint8_t i = 0; i < RAM_READ_LENGTH; i++) {
		vals[i] = 0;
 562:	01 e0       	ldi	r16, 0x01	; 1
 564:	10 e0       	ldi	r17, 0x00	; 0
 566:	0c 0f       	add	r16, r28
 568:	1d 1f       	adc	r17, r29
 56a:	0c 0d       	add	r16, r12
 56c:	1d 1d       	adc	r17, r13
 56e:	f8 01       	movw	r30, r16
 570:	10 82       	st	Z, r1
		vals[i] = dramHandler.readByte(&dramHandler, i);
 572:	e0 91 30 3c 	lds	r30, 0x3C30	; 0x803c30 <__DATA_REGION_ORIGIN__+0x30>
 576:	f0 91 31 3c 	lds	r31, 0x3C31	; 0x803c31 <__DATA_REGION_ORIGIN__+0x31>
 57a:	b7 01       	movw	r22, r14
 57c:	a6 01       	movw	r20, r12
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	9c e3       	ldi	r25, 0x3C	; 60
 582:	09 95       	icall
 584:	f8 01       	movw	r30, r16
 586:	80 83       	st	Z, r24
 588:	ff ef       	ldi	r31, 0xFF	; 255
 58a:	cf 1a       	sub	r12, r31
 58c:	df 0a       	sbc	r13, r31
 58e:	ef 0a       	sbc	r14, r31
 590:	ff 0a       	sbc	r15, r31
	for(uint8_t i = 0; i < RAM_READ_LENGTH; i++) {
		dramHandler.writeByte(&dramHandler, i, i % 5);
	}

	volatile uint8_t vals[0xFF];
	for(uint8_t i = 0; i < RAM_READ_LENGTH; i++) {
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	c8 16       	cp	r12, r24
 596:	d1 04       	cpc	r13, r1
 598:	e1 04       	cpc	r14, r1
 59a:	f1 04       	cpc	r15, r1
 59c:	11 f7       	brne	.-60     	; 0x562 <__vector_9+0x7c>
		vals[i] = 0;
		vals[i] = dramHandler.readByte(&dramHandler, i);
	}
	
	dramHandler.hasPendingRefresh = true;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	80 93 2e 3c 	sts	0x3C2E, r24	; 0x803c2e <__DATA_REGION_ORIGIN__+0x2e>
	/* Clear interrupt flag */
	TCA0.SINGLE.INTFLAGS |= (1 << TCA_SINGLE_CMP0EN_bp);
 5a4:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <__RODATA_PM_OFFSET__+0x7fca0b>
 5a8:	80 61       	ori	r24, 0x10	; 16
 5aa:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7fca0b>
}
 5ae:	c1 50       	subi	r28, 0x01	; 1
 5b0:	df 4f       	sbci	r29, 0xFF	; 255
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	de bf       	out	0x3e, r29	; 62
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	df 90       	pop	r13
 5dc:	cf 90       	pop	r12
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_16>:

ISR(SPI0_INT_vect) {
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	ef 93       	push	r30
 60c:	ff 93       	push	r31
	const uint8_t data = SPI0.DATA;
 60e:	60 91 c4 08 	lds	r22, 0x08C4	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
	dramHandler.buffer.push(&dramHandler.buffer, data);
 612:	c0 e0       	ldi	r28, 0x00	; 0
 614:	dc e3       	ldi	r29, 0x3C	; 60
 616:	e8 a5       	ldd	r30, Y+40	; 0x28
 618:	f9 a5       	ldd	r31, Y+41	; 0x29
 61a:	88 e1       	ldi	r24, 0x18	; 24
 61c:	9c e3       	ldi	r25, 0x3C	; 60
 61e:	09 95       	icall
	dramHandler.hasPendingBufferUpdate = true;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	8f a7       	std	Y+47, r24	; 0x2f
}
 624:	ff 91       	pop	r31
 626:	ef 91       	pop	r30
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	bf 91       	pop	r27
 62e:	af 91       	pop	r26
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	7f 91       	pop	r23
 636:	6f 91       	pop	r22
 638:	5f 91       	pop	r21
 63a:	4f 91       	pop	r20
 63c:	3f 91       	pop	r19
 63e:	2f 91       	pop	r18
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

0000064a <initTimer0>:

void initTimer0() {
	/* Set Prescaler */
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV16_gc;
 64a:	e0 e0       	ldi	r30, 0x00	; 0
 64c:	fa e0       	ldi	r31, 0x0A	; 10
 64e:	88 e0       	ldi	r24, 0x08	; 8
 650:	80 83       	st	Z, r24
	/* Set to Frequency Mode */
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_FRQ_gc;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	81 83       	std	Z+1, r24	; 0x01
	/* Set CMP value */
	TCA0.SINGLE.CMP0BUF = TIM0_COMP_VAL;
 656:	8e e3       	ldi	r24, 0x3E	; 62
 658:	99 e4       	ldi	r25, 0x49	; 73
 65a:	80 af       	std	Z+56, r24	; 0x38
 65c:	91 af       	std	Z+57, r25	; 0x39
	/* Enable Compare Channel 0 Interrupt */
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0EN_bm;
 65e:	80 e1       	ldi	r24, 0x10	; 16
 660:	82 87       	std	Z+10, r24	; 0x0a
	/* Enable TCA0 */
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
 662:	80 81       	ld	r24, Z
 664:	81 60       	ori	r24, 0x01	; 1
 666:	80 83       	st	Z, r24
 668:	08 95       	ret

0000066a <initSPI>:
}

void initSPI() {
	/* Set alternative SPI pins */
	PORTMUX.TWISPIROUTEA |= PORTMUX_SPI0_ALT1_gc;
 66a:	e0 ee       	ldi	r30, 0xE0	; 224
 66c:	f5 e0       	ldi	r31, 0x05	; 5
 66e:	83 81       	ldd	r24, Z+3	; 0x03
 670:	81 60       	ori	r24, 0x01	; 1
 672:	83 83       	std	Z+3, r24	; 0x03
	/* Enable Receive Interrupt */
	SPI0.INTCTRL |= SPI_IE_bm;
 674:	e0 ec       	ldi	r30, 0xC0	; 192
 676:	f8 e0       	ldi	r31, 0x08	; 8
 678:	82 81       	ldd	r24, Z+2	; 0x02
 67a:	81 60       	ori	r24, 0x01	; 1
 67c:	82 83       	std	Z+2, r24	; 0x02
	/* Enable SPI */
	SPI0.CTRLA |= SPI_ENABLE_bm;
 67e:	80 81       	ld	r24, Z
 680:	81 60       	ori	r24, 0x01	; 1
 682:	80 83       	st	Z, r24
 684:	08 95       	ret

00000686 <initCPU>:
}

void initCPU() {
	/* Disable Configuration Change Protection */
	CCP = 0xD8;
 686:	88 ed       	ldi	r24, 0xD8	; 216
 688:	84 bf       	out	0x34, r24	; 52
	/* Set Clock source to 20MHz internal oscillator */
	CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_OSC20M_gc;
 68a:	e0 e6       	ldi	r30, 0x60	; 96
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	10 82       	st	Z, r1
	/* Disable Configuration Change Protection */
	CCP = 0xD8;
 690:	84 bf       	out	0x34, r24	; 52
	/* Disable prescaler */
	CLKCTRL.MCLKCTRLB &= ~(1 << CLKCTRL_PEN_bp);
 692:	81 81       	ldd	r24, Z+1	; 0x01
 694:	8e 7f       	andi	r24, 0xFE	; 254
 696:	81 83       	std	Z+1, r24	; 0x01
	
	/* Enable interrupts globally */
	sei();
 698:	78 94       	sei
 69a:	08 95       	ret

0000069c <main>:
}

int main(void) {
	initDRAMHandler(&dramHandler);
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	9c e3       	ldi	r25, 0x3C	; 60
 6a0:	df de       	rcall	.-578    	; 0x460 <initDRAMHandler>

	initCPU();
 6a2:	f1 df       	rcall	.-30     	; 0x686 <initCPU>
	initSPI();
 6a4:	e2 df       	rcall	.-60     	; 0x66a <initSPI>
	initTimer0();
 6a6:	d1 df       	rcall	.-94     	; 0x64a <initTimer0>
	
    while (1) {
		asm("nop");
 6a8:	00 00       	nop
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <main+0xc>

000006ac <__udivmodqi4>:
 6ac:	99 1b       	sub	r25, r25
 6ae:	79 e0       	ldi	r23, 0x09	; 9
 6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__udivmodqi4_ep>

000006b2 <__udivmodqi4_loop>:
 6b2:	99 1f       	adc	r25, r25
 6b4:	96 17       	cp	r25, r22
 6b6:	08 f0       	brcs	.+2      	; 0x6ba <__udivmodqi4_ep>
 6b8:	96 1b       	sub	r25, r22

000006ba <__udivmodqi4_ep>:
 6ba:	88 1f       	adc	r24, r24
 6bc:	7a 95       	dec	r23
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <__udivmodqi4_loop>
 6c0:	80 95       	com	r24
 6c2:	08 95       	ret

000006c4 <_exit>:
 6c4:	f8 94       	cli

000006c6 <__stop_program>:
 6c6:	ff cf       	rjmp	.-2      	; 0x6c6 <__stop_program>
