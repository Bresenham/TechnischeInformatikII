
TestProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803c00  00803c00  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002eed  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000023e5  00000000  00000000  00003111  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000314  00000000  00000000  000054f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000580c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000162f  00000000  00000000  0000587c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  00006eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00006f01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_9>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  8c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  90:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  94:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  98:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  9c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	3a d0       	rcall	.+116    	; 0x122 <main>
  ae:	3c c0       	rjmp	.+120    	; 0x128 <_exit>

000000b0 <__bad_interrupt>:
  b0:	a7 cf       	rjmp	.-178    	; 0x0 <__vectors>

000000b2 <__vector_9>:
#define TIM0_MS         30
#define TIM0_MS_FACTOR  ( (F_CPU) / (1000 * TIM0_PRESCALER) )
#define TIM0_COMP_VAL   ((TIM0_MS / 2) * TIM0_MS_FACTOR)


ISR(TCA0_CMP0_vect) {
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	/* Clear interrupt flag */
	PORTF.OUTTGL = PIN0_bm;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__RODATA_PM_OFFSET__+0x7fc4a7>
	TCA0.SINGLE.INTFLAGS |= (1 << TCA_SINGLE_CMP0EN_bp);
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	fa e0       	ldi	r31, 0x0A	; 10
  cc:	83 85       	ldd	r24, Z+11	; 0x0b
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	83 87       	std	Z+11, r24	; 0x0b
}
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <initTimer0>:

void initTimer0() {
	/* Set Prescaler */
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV16_gc;
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	fa e0       	ldi	r31, 0x0A	; 10
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	80 83       	st	Z, r24
	/* Set to Frequency Mode */
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_FRQ_gc;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	81 83       	std	Z+1, r24	; 0x01
	/* Set CMP value */
	TCA0.SINGLE.CMP0BUF = TIM0_COMP_VAL;
  ee:	8e e3       	ldi	r24, 0x3E	; 62
  f0:	99 e4       	ldi	r25, 0x49	; 73
  f2:	80 af       	std	Z+56, r24	; 0x38
  f4:	91 af       	std	Z+57, r25	; 0x39
	/* Enable Compare Channel 0 Interrupt */
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0EN_bm;
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	82 87       	std	Z+10, r24	; 0x0a
	/* Enable TCA0 */
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <initCPU>:
}

void initCPU() {
	/* Disable Configuration Change Protection */
	CCP = 0xD8;
 102:	88 ed       	ldi	r24, 0xD8	; 216
 104:	84 bf       	out	0x34, r24	; 52
	/* Set Clock source to 20MHz internal oscillator */
	CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_OSC20M_gc;
 106:	e0 e6       	ldi	r30, 0x60	; 96
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
	/* Disable Configuration Change Protection */
	CCP = 0xD8;
 10c:	84 bf       	out	0x34, r24	; 52
	/* Disable prescaler */
	CLKCTRL.MCLKCTRLB &= ~(1 << CLKCTRL_PEN_bp);
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	81 83       	std	Z+1, r24	; 0x01
	
	/* Enable interrupts globally */
	sei();
 114:	78 94       	sei
	
	PORTF.DIR |= (1 << PIN0_bp);
 116:	e0 ea       	ldi	r30, 0xA0	; 160
 118:	f4 e0       	ldi	r31, 0x04	; 4
 11a:	80 81       	ld	r24, Z
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <main>:
}

int main(void) {
	initCPU();
 122:	ef df       	rcall	.-34     	; 0x102 <initCPU>
	initTimer0();
 124:	de df       	rcall	.-68     	; 0xe2 <initTimer0>
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x4>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
