
TestProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803c00  00803c00  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00803c00  00803c00  0000074c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e43  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002756  00000000  00000000  00004693  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000896  00000000  00000000  00006de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00007680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001853  00000000  00000000  000078c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000916  00000000  00000000  00009113  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00009a29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_9>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_16>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_clear_bss>:
  ac:	2c e3       	ldi	r18, 0x3C	; 60
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	bc e3       	ldi	r27, 0x3C	; 60
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a2 33       	cpi	r26, 0x32	; 50
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	d6 d2       	rcall	.+1452   	; 0x66a <main>
  be:	0a c3       	rjmp	.+1556   	; 0x6d4 <_exit>

000000c0 <__bad_interrupt>:
  c0:	9f cf       	rjmp	.-194    	; 0x0 <__vectors>

000000c2 <processAndRespondBuffer>:
	
	self->DATA_PORT->OUT = 0;
	writeToAddrPort(self, 0x00);
}

void processAndRespondBuffer(DRAM_HANDLER *self) {
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	const uint32_t addr = ( ((uint32_t)*self->buffer.PTR.addr1) << 16 ) | ( ((uint32_t)*self->buffer.PTR.addr2) << 8 ) | (*self->buffer.PTR.addr3);
  d4:	ec 89       	ldd	r30, Y+20	; 0x14
  d6:	fd 89       	ldd	r31, Y+21	; 0x15
  d8:	80 81       	ld	r24, Z
  da:	ee 89       	ldd	r30, Y+22	; 0x16
  dc:	ff 89       	ldd	r31, Y+23	; 0x17
  de:	c0 80       	ld	r12, Z
  e0:	d1 2c       	mov	r13, r1
  e2:	e1 2c       	mov	r14, r1
  e4:	f1 2c       	mov	r15, r1
  e6:	fe 2c       	mov	r15, r14
  e8:	ed 2c       	mov	r14, r13
  ea:	dc 2c       	mov	r13, r12
  ec:	cc 24       	eor	r12, r12
  ee:	e8 2a       	or	r14, r24
  f0:	e8 8d       	ldd	r30, Y+24	; 0x18
  f2:	f9 8d       	ldd	r31, Y+25	; 0x19
  f4:	80 81       	ld	r24, Z
  f6:	c8 2a       	or	r12, r24
	const uint8_t bufferLen = self->buffer.getLength(&self->buffer);
  f8:	8e 01       	movw	r16, r28
  fa:	0e 5e       	subi	r16, 0xEE	; 238
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
  fe:	ec a1       	ldd	r30, Y+36	; 0x24
 100:	fd a1       	ldd	r31, Y+37	; 0x25
 102:	c8 01       	movw	r24, r16
 104:	09 95       	icall

	if(*self->buffer.PTR.cmd == READ_ADDR_CMD && bufferLen == READ_CMD_LEN) {
 106:	ea 89       	ldd	r30, Y+18	; 0x12
 108:	fb 89       	ldd	r31, Y+19	; 0x13
 10a:	90 81       	ld	r25, Z
 10c:	93 31       	cpi	r25, 0x13	; 19
 10e:	59 f4       	brne	.+22     	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
 110:	84 30       	cpi	r24, 0x04	; 4
 112:	b1 f4       	brne	.+44     	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
		const uint8_t data = self->readByte(self, addr);
 114:	ea a5       	ldd	r30, Y+42	; 0x2a
 116:	fb a5       	ldd	r31, Y+43	; 0x2b
 118:	b7 01       	movw	r22, r14
 11a:	a6 01       	movw	r20, r12
 11c:	ce 01       	movw	r24, r28
 11e:	09 95       	icall
		SPI0.DATA = data;
 120:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>

void processAndRespondBuffer(DRAM_HANDLER *self) {
	const uint32_t addr = ( ((uint32_t)*self->buffer.PTR.addr1) << 16 ) | ( ((uint32_t)*self->buffer.PTR.addr2) << 8 ) | (*self->buffer.PTR.addr3);
	const uint8_t bufferLen = self->buffer.getLength(&self->buffer);

	if(*self->buffer.PTR.cmd == READ_ADDR_CMD && bufferLen == READ_CMD_LEN) {
 124:	0d c0       	rjmp	.+26     	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
		const uint8_t data = self->readByte(self, addr);
		SPI0.DATA = data;
	} else if(*self->buffer.PTR.cmd == WRITE_CMD && bufferLen == WRITE_CMD_LEN) {
 126:	92 31       	cpi	r25, 0x12	; 18
 128:	59 f4       	brne	.+22     	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
 12a:	85 30       	cpi	r24, 0x05	; 5
 12c:	49 f4       	brne	.+18     	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
		const uint8_t data = *self->buffer.PTR.param1;
 12e:	aa 8d       	ldd	r26, Y+26	; 0x1a
 130:	bb 8d       	ldd	r27, Y+27	; 0x1b
		self->writeByte(self, addr, data);
 132:	ec a5       	ldd	r30, Y+44	; 0x2c
 134:	fd a5       	ldd	r31, Y+45	; 0x2d
 136:	2c 91       	ld	r18, X
 138:	b7 01       	movw	r22, r14
 13a:	a6 01       	movw	r20, r12
 13c:	ce 01       	movw	r24, r28
 13e:	09 95       	icall
	}
	
	self->buffer.reset(&self->buffer);
 140:	ee a1       	ldd	r30, Y+38	; 0x26
 142:	ff a1       	ldd	r31, Y+39	; 0x27
 144:	c8 01       	movw	r24, r16
 146:	09 95       	icall
	self->hasPendingBufferUpdate = false;
 148:	19 a6       	std	Y+41, r1	; 0x29
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	ff 90       	pop	r15
 154:	ef 90       	pop	r14
 156:	df 90       	pop	r13
 158:	cf 90       	pop	r12
 15a:	08 95       	ret

0000015c <writeToAddrPort>:

#define WRITE_CMD		0x12
#define WRITE_CMD_LEN	5

void writeToAddrPort(DRAM_HANDLER *self, uint16_t addr) {
	self->ADDR_PORT.P1->OUT = (addr << ADDR_PORT1_SHIFT);
 15c:	dc 01       	movw	r26, r24
 15e:	1e 96       	adiw	r26, 0x0e	; 14
 160:	ed 91       	ld	r30, X+
 162:	fc 91       	ld	r31, X
 164:	1f 97       	sbiw	r26, 0x0f	; 15
 166:	26 2f       	mov	r18, r22
 168:	22 95       	swap	r18
 16a:	22 0f       	add	r18, r18
 16c:	20 7e       	andi	r18, 0xE0	; 224
 16e:	24 83       	std	Z+4, r18	; 0x04
	self->ADDR_PORT.P2->OUT = (addr >> ADDR_PORT2_SHIFT);
 170:	50 96       	adiw	r26, 0x10	; 16
 172:	ed 91       	ld	r30, X+
 174:	fc 91       	ld	r31, X
 176:	51 97       	sbiw	r26, 0x11	; 17
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	76 95       	lsr	r23
 17c:	67 95       	ror	r22
 17e:	8a 95       	dec	r24
 180:	e1 f7       	brne	.-8      	; 0x17a <writeToAddrPort+0x1e>
 182:	64 83       	std	Z+4, r22	; 0x04
 184:	08 95       	ret

00000186 <refreshRASonly>:
	self->OE.PORT->OUT &= ~self->OE.PIN;
	self->W.PORT->DIR |= self->W.PIN;
	self->W.PORT->OUT |= self->W.PIN;
}

void refreshRASonly(DRAM_HANDLER *self) {
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
	self->RAS.PORT->OUT |= self->RAS.PIN;
 190:	ea 81       	ldd	r30, Y+2	; 0x02
 192:	fb 81       	ldd	r31, Y+3	; 0x03
 194:	94 81       	ldd	r25, Z+4	; 0x04
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	89 2b       	or	r24, r25
 19a:	84 83       	std	Z+4, r24	; 0x04
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 19c:	ed 81       	ldd	r30, Y+5	; 0x05
 19e:	fe 81       	ldd	r31, Y+6	; 0x06
 1a0:	94 81       	ldd	r25, Z+4	; 0x04
 1a2:	8f 81       	ldd	r24, Y+7	; 0x07
 1a4:	80 95       	com	r24
 1a6:	89 23       	and	r24, r25
 1a8:	84 83       	std	Z+4, r24	; 0x04

	for(uint16_t row = 0; row < AMOUNT_OF_ROWS; row++) {
 1aa:	00 e0       	ldi	r16, 0x00	; 0
 1ac:	10 e0       	ldi	r17, 0x00	; 0
		self->CAS.PORT->OUT |= self->CAS.PIN;
 1ae:	ed 81       	ldd	r30, Y+5	; 0x05
 1b0:	fe 81       	ldd	r31, Y+6	; 0x06
 1b2:	94 81       	ldd	r25, Z+4	; 0x04
 1b4:	8f 81       	ldd	r24, Y+7	; 0x07
 1b6:	89 2b       	or	r24, r25
 1b8:	84 83       	std	Z+4, r24	; 0x04
		writeToAddrPort(self, row);
 1ba:	b8 01       	movw	r22, r16
 1bc:	ce 01       	movw	r24, r28
 1be:	ce df       	rcall	.-100    	; 0x15c <writeToAddrPort>
		self->RAS.PORT->OUT &= ~self->RAS.PIN;
 1c0:	ea 81       	ldd	r30, Y+2	; 0x02
 1c2:	fb 81       	ldd	r31, Y+3	; 0x03
 1c4:	94 81       	ldd	r25, Z+4	; 0x04
 1c6:	8c 81       	ldd	r24, Y+4	; 0x04
 1c8:	80 95       	com	r24
 1ca:	89 23       	and	r24, r25
 1cc:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	8d e0       	ldi	r24, 0x0D	; 13
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <refreshRASonly+0x4a>
 1d4:	00 00       	nop
		
		_delay_us(2);
		
		self->RAS.PORT->OUT |= self->RAS.PIN;
 1d6:	ea 81       	ldd	r30, Y+2	; 0x02
 1d8:	fb 81       	ldd	r31, Y+3	; 0x03
 1da:	94 81       	ldd	r25, Z+4	; 0x04
 1dc:	8c 81       	ldd	r24, Y+4	; 0x04
 1de:	89 2b       	or	r24, r25
 1e0:	84 83       	std	Z+4, r24	; 0x04
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <refreshRASonly+0x5e>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <refreshRASonly+0x64>
		_delay_us(1);

		self->CAS.PORT->OUT &= ~self->CAS.PIN;
 1ea:	ed 81       	ldd	r30, Y+5	; 0x05
 1ec:	fe 81       	ldd	r31, Y+6	; 0x06
 1ee:	94 81       	ldd	r25, Z+4	; 0x04
 1f0:	8f 81       	ldd	r24, Y+7	; 0x07
 1f2:	80 95       	com	r24
 1f4:	89 23       	and	r24, r25
 1f6:	84 83       	std	Z+4, r24	; 0x04
		self->CAS.PORT->OUT |= self->CAS.PIN;
 1f8:	ed 81       	ldd	r30, Y+5	; 0x05
 1fa:	fe 81       	ldd	r31, Y+6	; 0x06
 1fc:	94 81       	ldd	r25, Z+4	; 0x04
 1fe:	8f 81       	ldd	r24, Y+7	; 0x07
 200:	89 2b       	or	r24, r25
 202:	84 83       	std	Z+4, r24	; 0x04
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	8a 95       	dec	r24
 208:	f1 f7       	brne	.-4      	; 0x206 <refreshRASonly+0x80>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <refreshRASonly+0x86>
		_delay_us(1);
		
		self->CAS.PORT->OUT &= ~self->CAS.PIN;
 20c:	ed 81       	ldd	r30, Y+5	; 0x05
 20e:	fe 81       	ldd	r31, Y+6	; 0x06
 210:	94 81       	ldd	r25, Z+4	; 0x04
 212:	8f 81       	ldd	r24, Y+7	; 0x07
 214:	80 95       	com	r24
 216:	89 23       	and	r24, r25
 218:	84 83       	std	Z+4, r24	; 0x04

void refreshRASonly(DRAM_HANDLER *self) {
	self->RAS.PORT->OUT |= self->RAS.PIN;
	self->CAS.PORT->OUT &= ~self->CAS.PIN;

	for(uint16_t row = 0; row < AMOUNT_OF_ROWS; row++) {
 21a:	0f 5f       	subi	r16, 0xFF	; 255
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
 21e:	01 15       	cp	r16, r1
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	18 07       	cpc	r17, r24
 224:	21 f6       	brne	.-120    	; 0x1ae <refreshRASonly+0x28>
		self->CAS.PORT->OUT |= self->CAS.PIN;
		_delay_us(1);
		
		self->CAS.PORT->OUT &= ~self->CAS.PIN;
	}
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <readByte>:

uint8_t readByte(DRAM_HANDLER *self, uint32_t addr) {
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	6a 01       	movw	r12, r20
 240:	7b 01       	movw	r14, r22
	const uint16_t rowAddr = (addr & ADDR_MASK) >> HIGH_ADDR_SHIFT;
	const uint16_t colAddr = (addr & LOW_ADDR_MASK);
	self->DATA_PORT->DIR = 0;	/* Set DATA_PORT as input */
 242:	e8 81       	ld	r30, Y
 244:	f9 81       	ldd	r31, Y+1	; 0x01
 246:	10 82       	st	Z, r1
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 248:	ed 81       	ldd	r30, Y+5	; 0x05
 24a:	fe 81       	ldd	r31, Y+6	; 0x06
 24c:	94 81       	ldd	r25, Z+4	; 0x04
 24e:	8f 81       	ldd	r24, Y+7	; 0x07
 250:	89 2b       	or	r24, r25
 252:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, rowAddr);
 254:	db 01       	movw	r26, r22
 256:	ca 01       	movw	r24, r20
 258:	a3 70       	andi	r26, 0x03	; 3
 25a:	bb 27       	eor	r27, r27
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	29 e0       	ldi	r18, 0x09	; 9
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	77 95       	ror	r23
 268:	67 95       	ror	r22
 26a:	2a 95       	dec	r18
 26c:	d1 f7       	brne	.-12     	; 0x262 <readByte+0x32>
 26e:	ce 01       	movw	r24, r28
 270:	75 df       	rcall	.-278    	; 0x15c <writeToAddrPort>
	
	self->RAS.PORT->OUT &= ~self->RAS.PIN;
 272:	ea 81       	ldd	r30, Y+2	; 0x02
 274:	fb 81       	ldd	r31, Y+3	; 0x03
 276:	94 81       	ldd	r25, Z+4	; 0x04
 278:	8c 81       	ldd	r24, Y+4	; 0x04
 27a:	80 95       	com	r24
 27c:	89 23       	and	r24, r25
 27e:	84 83       	std	Z+4, r24	; 0x04
	
	self->W.PORT->OUT |= self->W.PIN;
 280:	eb 85       	ldd	r30, Y+11	; 0x0b
 282:	fc 85       	ldd	r31, Y+12	; 0x0c
 284:	94 81       	ldd	r25, Z+4	; 0x04
 286:	8d 85       	ldd	r24, Y+13	; 0x0d
 288:	89 2b       	or	r24, r25
 28a:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, colAddr);
 28c:	b6 01       	movw	r22, r12
 28e:	71 70       	andi	r23, 0x01	; 1
 290:	ce 01       	movw	r24, r28
 292:	64 df       	rcall	.-312    	; 0x15c <writeToAddrPort>
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 294:	ed 81       	ldd	r30, Y+5	; 0x05
 296:	fe 81       	ldd	r31, Y+6	; 0x06
 298:	94 81       	ldd	r25, Z+4	; 0x04
 29a:	8f 81       	ldd	r24, Y+7	; 0x07
 29c:	80 95       	com	r24
 29e:	89 23       	and	r24, r25
 2a0:	84 83       	std	Z+4, r24	; 0x04
	
	self->OE.PORT->OUT &= ~self->OE.PIN;
 2a2:	e8 85       	ldd	r30, Y+8	; 0x08
 2a4:	f9 85       	ldd	r31, Y+9	; 0x09
 2a6:	94 81       	ldd	r25, Z+4	; 0x04
 2a8:	8a 85       	ldd	r24, Y+10	; 0x0a
 2aa:	80 95       	com	r24
 2ac:	89 23       	and	r24, r25
 2ae:	84 83       	std	Z+4, r24	; 0x04
	
	const uint8_t validDataOut = self->DATA_PORT->IN;
 2b0:	e8 81       	ld	r30, Y
 2b2:	f9 81       	ldd	r31, Y+1	; 0x01
 2b4:	80 85       	ldd	r24, Z+8	; 0x08
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 2b6:	ed 81       	ldd	r30, Y+5	; 0x05
 2b8:	fe 81       	ldd	r31, Y+6	; 0x06
 2ba:	24 81       	ldd	r18, Z+4	; 0x04
 2bc:	9f 81       	ldd	r25, Y+7	; 0x07
 2be:	92 2b       	or	r25, r18
 2c0:	94 83       	std	Z+4, r25	; 0x04
	self->RAS.PORT->OUT |= self->RAS.PIN;
 2c2:	ea 81       	ldd	r30, Y+2	; 0x02
 2c4:	fb 81       	ldd	r31, Y+3	; 0x03
 2c6:	24 81       	ldd	r18, Z+4	; 0x04
 2c8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ca:	92 2b       	or	r25, r18
 2cc:	94 83       	std	Z+4, r25	; 0x04
	
	self->DATA_PORT->DIR = 0xFF; /* Set DATA_PORT to output */
 2ce:	e8 81       	ld	r30, Y
 2d0:	f9 81       	ldd	r31, Y+1	; 0x01
 2d2:	9f ef       	ldi	r25, 0xFF	; 255
 2d4:	90 83       	st	Z, r25
	
	return validDataOut;
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	08 95       	ret

000002e4 <writeByte>:

void writeByte(DRAM_HANDLER *self, uint32_t addr, uint8_t data) {
 2e4:	cf 92       	push	r12
 2e6:	df 92       	push	r13
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ec 01       	movw	r28, r24
 2f4:	6a 01       	movw	r12, r20
 2f6:	7b 01       	movw	r14, r22
 2f8:	12 2f       	mov	r17, r18
	const uint16_t rowAddr = (addr & ADDR_MASK) >> HIGH_ADDR_SHIFT;
	const uint16_t colAddr = (addr & LOW_ADDR_MASK);
	self->DATA_PORT->DIR = 0xFF; /* Set DATA_PORT as output */
 2fa:	e8 81       	ld	r30, Y
 2fc:	f9 81       	ldd	r31, Y+1	; 0x01
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	80 83       	st	Z, r24
	self->RAS.PORT->OUT |= self->RAS.PIN;
 302:	ea 81       	ldd	r30, Y+2	; 0x02
 304:	fb 81       	ldd	r31, Y+3	; 0x03
 306:	94 81       	ldd	r25, Z+4	; 0x04
 308:	8c 81       	ldd	r24, Y+4	; 0x04
 30a:	89 2b       	or	r24, r25
 30c:	84 83       	std	Z+4, r24	; 0x04
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 30e:	ed 81       	ldd	r30, Y+5	; 0x05
 310:	fe 81       	ldd	r31, Y+6	; 0x06
 312:	94 81       	ldd	r25, Z+4	; 0x04
 314:	8f 81       	ldd	r24, Y+7	; 0x07
 316:	89 2b       	or	r24, r25
 318:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, rowAddr);
 31a:	db 01       	movw	r26, r22
 31c:	ca 01       	movw	r24, r20
 31e:	a3 70       	andi	r26, 0x03	; 3
 320:	bb 27       	eor	r27, r27
 322:	bc 01       	movw	r22, r24
 324:	cd 01       	movw	r24, r26
 326:	29 e0       	ldi	r18, 0x09	; 9
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	77 95       	ror	r23
 32e:	67 95       	ror	r22
 330:	2a 95       	dec	r18
 332:	d1 f7       	brne	.-12     	; 0x328 <writeByte+0x44>
 334:	ce 01       	movw	r24, r28
 336:	12 df       	rcall	.-476    	; 0x15c <writeToAddrPort>
	self->RAS.PORT->OUT &= ~self->RAS.PIN;
 338:	ea 81       	ldd	r30, Y+2	; 0x02
 33a:	fb 81       	ldd	r31, Y+3	; 0x03
 33c:	94 81       	ldd	r25, Z+4	; 0x04
 33e:	8c 81       	ldd	r24, Y+4	; 0x04
 340:	80 95       	com	r24
 342:	89 23       	and	r24, r25
 344:	84 83       	std	Z+4, r24	; 0x04
	
	self->OE.PORT->OUT |= self->OE.PIN;
 346:	e8 85       	ldd	r30, Y+8	; 0x08
 348:	f9 85       	ldd	r31, Y+9	; 0x09
 34a:	94 81       	ldd	r25, Z+4	; 0x04
 34c:	8a 85       	ldd	r24, Y+10	; 0x0a
 34e:	89 2b       	or	r24, r25
 350:	84 83       	std	Z+4, r24	; 0x04
	writeToAddrPort(self, colAddr);
 352:	b6 01       	movw	r22, r12
 354:	71 70       	andi	r23, 0x01	; 1
 356:	ce 01       	movw	r24, r28
 358:	01 df       	rcall	.-510    	; 0x15c <writeToAddrPort>
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 35a:	ed 81       	ldd	r30, Y+5	; 0x05
 35c:	fe 81       	ldd	r31, Y+6	; 0x06
 35e:	94 81       	ldd	r25, Z+4	; 0x04
 360:	8f 81       	ldd	r24, Y+7	; 0x07
 362:	80 95       	com	r24
 364:	89 23       	and	r24, r25
 366:	84 83       	std	Z+4, r24	; 0x04
	self->DATA_PORT->OUT = data;
 368:	e8 81       	ld	r30, Y
 36a:	f9 81       	ldd	r31, Y+1	; 0x01
 36c:	14 83       	std	Z+4, r17	; 0x04
	self->W.PORT->OUT &= ~self->W.PIN;
 36e:	eb 85       	ldd	r30, Y+11	; 0x0b
 370:	fc 85       	ldd	r31, Y+12	; 0x0c
 372:	94 81       	ldd	r25, Z+4	; 0x04
 374:	8d 85       	ldd	r24, Y+13	; 0x0d
 376:	80 95       	com	r24
 378:	89 23       	and	r24, r25
 37a:	84 83       	std	Z+4, r24	; 0x04
	
	self->OE.PORT->OUT &= ~self->OE.PIN;
 37c:	e8 85       	ldd	r30, Y+8	; 0x08
 37e:	f9 85       	ldd	r31, Y+9	; 0x09
 380:	94 81       	ldd	r25, Z+4	; 0x04
 382:	8a 85       	ldd	r24, Y+10	; 0x0a
 384:	80 95       	com	r24
 386:	89 23       	and	r24, r25
 388:	84 83       	std	Z+4, r24	; 0x04
	
	self->CAS.PORT->OUT |= self->CAS.PIN;
 38a:	ed 81       	ldd	r30, Y+5	; 0x05
 38c:	fe 81       	ldd	r31, Y+6	; 0x06
 38e:	94 81       	ldd	r25, Z+4	; 0x04
 390:	8f 81       	ldd	r24, Y+7	; 0x07
 392:	89 2b       	or	r24, r25
 394:	84 83       	std	Z+4, r24	; 0x04
	self->RAS.PORT->OUT |= self->RAS.PIN;
 396:	ea 81       	ldd	r30, Y+2	; 0x02
 398:	fb 81       	ldd	r31, Y+3	; 0x03
 39a:	94 81       	ldd	r25, Z+4	; 0x04
 39c:	8c 81       	ldd	r24, Y+4	; 0x04
 39e:	89 2b       	or	r24, r25
 3a0:	84 83       	std	Z+4, r24	; 0x04
	
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 3a2:	ed 81       	ldd	r30, Y+5	; 0x05
 3a4:	fe 81       	ldd	r31, Y+6	; 0x06
 3a6:	94 81       	ldd	r25, Z+4	; 0x04
 3a8:	8f 81       	ldd	r24, Y+7	; 0x07
 3aa:	80 95       	com	r24
 3ac:	89 23       	and	r24, r25
 3ae:	84 83       	std	Z+4, r24	; 0x04
	self->W.PORT->OUT |= self->W.PIN;
 3b0:	eb 85       	ldd	r30, Y+11	; 0x0b
 3b2:	fc 85       	ldd	r31, Y+12	; 0x0c
 3b4:	94 81       	ldd	r25, Z+4	; 0x04
 3b6:	8d 85       	ldd	r24, Y+13	; 0x0d
 3b8:	89 2b       	or	r24, r25
 3ba:	84 83       	std	Z+4, r24	; 0x04
	
	self->DATA_PORT->OUT = 0;
 3bc:	e8 81       	ld	r30, Y
 3be:	f9 81       	ldd	r31, Y+1	; 0x01
 3c0:	14 82       	std	Z+4, r1	; 0x04

#define WRITE_CMD		0x12
#define WRITE_CMD_LEN	5

void writeToAddrPort(DRAM_HANDLER *self, uint16_t addr) {
	self->ADDR_PORT.P1->OUT = (addr << ADDR_PORT1_SHIFT);
 3c2:	ee 85       	ldd	r30, Y+14	; 0x0e
 3c4:	ff 85       	ldd	r31, Y+15	; 0x0f
 3c6:	14 82       	std	Z+4, r1	; 0x04
	self->ADDR_PORT.P2->OUT = (addr >> ADDR_PORT2_SHIFT);
 3c8:	e8 89       	ldd	r30, Y+16	; 0x10
 3ca:	f9 89       	ldd	r31, Y+17	; 0x11
 3cc:	14 82       	std	Z+4, r1	; 0x04
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
	self->W.PORT->OUT |= self->W.PIN;
	
	self->DATA_PORT->OUT = 0;
	writeToAddrPort(self, 0x00);
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	ff 90       	pop	r15
 3d6:	ef 90       	pop	r14
 3d8:	df 90       	pop	r13
 3da:	cf 90       	pop	r12
 3dc:	08 95       	ret

000003de <resetPins>:
void writeToAddrPort(DRAM_HANDLER *self, uint16_t addr) {
	self->ADDR_PORT.P1->OUT = (addr << ADDR_PORT1_SHIFT);
	self->ADDR_PORT.P2->OUT = (addr >> ADDR_PORT2_SHIFT);
}

void resetPins(DRAM_HANDLER *self) {
 3de:	fc 01       	movw	r30, r24
	self->RAS.PORT->DIR |= self->RAS.PIN;
 3e0:	a2 81       	ldd	r26, Z+2	; 0x02
 3e2:	b3 81       	ldd	r27, Z+3	; 0x03
 3e4:	9c 91       	ld	r25, X
 3e6:	84 81       	ldd	r24, Z+4	; 0x04
 3e8:	89 2b       	or	r24, r25
 3ea:	8c 93       	st	X, r24
	self->RAS.PORT->OUT |= self->RAS.PIN;
 3ec:	a2 81       	ldd	r26, Z+2	; 0x02
 3ee:	b3 81       	ldd	r27, Z+3	; 0x03
 3f0:	14 96       	adiw	r26, 0x04	; 4
 3f2:	9c 91       	ld	r25, X
 3f4:	14 97       	sbiw	r26, 0x04	; 4
 3f6:	84 81       	ldd	r24, Z+4	; 0x04
 3f8:	89 2b       	or	r24, r25
 3fa:	14 96       	adiw	r26, 0x04	; 4
 3fc:	8c 93       	st	X, r24
	self->CAS.PORT->DIR |= self->CAS.PIN;
 3fe:	a5 81       	ldd	r26, Z+5	; 0x05
 400:	b6 81       	ldd	r27, Z+6	; 0x06
 402:	9c 91       	ld	r25, X
 404:	87 81       	ldd	r24, Z+7	; 0x07
 406:	89 2b       	or	r24, r25
 408:	8c 93       	st	X, r24
	self->CAS.PORT->OUT &= ~self->CAS.PIN;
 40a:	a5 81       	ldd	r26, Z+5	; 0x05
 40c:	b6 81       	ldd	r27, Z+6	; 0x06
 40e:	14 96       	adiw	r26, 0x04	; 4
 410:	9c 91       	ld	r25, X
 412:	14 97       	sbiw	r26, 0x04	; 4
 414:	87 81       	ldd	r24, Z+7	; 0x07
 416:	80 95       	com	r24
 418:	89 23       	and	r24, r25
 41a:	14 96       	adiw	r26, 0x04	; 4
 41c:	8c 93       	st	X, r24
	self->OE.PORT->DIR |= self->OE.PIN;
 41e:	a0 85       	ldd	r26, Z+8	; 0x08
 420:	b1 85       	ldd	r27, Z+9	; 0x09
 422:	9c 91       	ld	r25, X
 424:	82 85       	ldd	r24, Z+10	; 0x0a
 426:	89 2b       	or	r24, r25
 428:	8c 93       	st	X, r24
	self->OE.PORT->OUT &= ~self->OE.PIN;
 42a:	a0 85       	ldd	r26, Z+8	; 0x08
 42c:	b1 85       	ldd	r27, Z+9	; 0x09
 42e:	14 96       	adiw	r26, 0x04	; 4
 430:	9c 91       	ld	r25, X
 432:	14 97       	sbiw	r26, 0x04	; 4
 434:	82 85       	ldd	r24, Z+10	; 0x0a
 436:	80 95       	com	r24
 438:	89 23       	and	r24, r25
 43a:	14 96       	adiw	r26, 0x04	; 4
 43c:	8c 93       	st	X, r24
	self->W.PORT->DIR |= self->W.PIN;
 43e:	a3 85       	ldd	r26, Z+11	; 0x0b
 440:	b4 85       	ldd	r27, Z+12	; 0x0c
 442:	9c 91       	ld	r25, X
 444:	85 85       	ldd	r24, Z+13	; 0x0d
 446:	89 2b       	or	r24, r25
 448:	8c 93       	st	X, r24
	self->W.PORT->OUT |= self->W.PIN;
 44a:	a3 85       	ldd	r26, Z+11	; 0x0b
 44c:	b4 85       	ldd	r27, Z+12	; 0x0c
 44e:	14 96       	adiw	r26, 0x04	; 4
 450:	9c 91       	ld	r25, X
 452:	14 97       	sbiw	r26, 0x04	; 4
 454:	85 85       	ldd	r24, Z+13	; 0x0d
 456:	89 2b       	or	r24, r25
 458:	14 96       	adiw	r26, 0x04	; 4
 45a:	8c 93       	st	X, r24
 45c:	08 95       	ret

0000045e <initDRAMHandler>:
	
	self->buffer.reset(&self->buffer);
	self->hasPendingBufferUpdate = false;
}

void initDRAMHandler(DRAM_HANDLER *self) {
 45e:	fc 01       	movw	r30, r24
	self->readByte = &readByte;
 460:	88 e1       	ldi	r24, 0x18	; 24
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	82 a7       	std	Z+42, r24	; 0x2a
 466:	93 a7       	std	Z+43, r25	; 0x2b
	self->writeByte = &writeByte;
 468:	82 e7       	ldi	r24, 0x72	; 114
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	84 a7       	std	Z+44, r24	; 0x2c
 46e:	95 a7       	std	Z+45, r25	; 0x2d
	self->refreshRASonly = &refreshRASonly;
 470:	83 ec       	ldi	r24, 0xC3	; 195
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	86 a7       	std	Z+46, r24	; 0x2e
 476:	97 a7       	std	Z+47, r25	; 0x2f
	self->processAndRespondBuffer = &processAndRespondBuffer;
 478:	81 e6       	ldi	r24, 0x61	; 97
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	80 ab       	std	Z+48, r24	; 0x30
 47e:	91 ab       	std	Z+49, r25	; 0x31
	
	self->hasPendingRefresh = false;
 480:	10 a6       	std	Z+40, r1	; 0x28
	self->hasPendingBufferUpdate = false;
 482:	11 a6       	std	Z+41, r1	; 0x29
	
	self->DATA_PORT = &PORTD;
 484:	80 e6       	ldi	r24, 0x60	; 96
 486:	94 e0       	ldi	r25, 0x04	; 4
 488:	80 83       	st	Z, r24
 48a:	91 83       	std	Z+1, r25	; 0x01
	
	self->RAS.PORT = &PORTE;
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	94 e0       	ldi	r25, 0x04	; 4
 490:	82 83       	std	Z+2, r24	; 0x02
 492:	93 83       	std	Z+3, r25	; 0x03
	self->RAS.PIN = PIN0_bm;
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	24 83       	std	Z+4, r18	; 0x04

	self->CAS.PORT = &PORTE;
 498:	85 83       	std	Z+5, r24	; 0x05
 49a:	96 83       	std	Z+6, r25	; 0x06
	self->CAS.PIN = PIN1_bm;
 49c:	22 e0       	ldi	r18, 0x02	; 2
 49e:	27 83       	std	Z+7, r18	; 0x07
	
	self->OE.PORT = &PORTE;
 4a0:	80 87       	std	Z+8, r24	; 0x08
 4a2:	91 87       	std	Z+9, r25	; 0x09
	self->OE.PIN = PIN2_bm;
 4a4:	24 e0       	ldi	r18, 0x04	; 4
 4a6:	22 87       	std	Z+10, r18	; 0x0a
	
	self->W.PORT = &PORTE;
 4a8:	83 87       	std	Z+11, r24	; 0x0b
 4aa:	94 87       	std	Z+12, r25	; 0x0c
	self->W.PIN = PIN3_bm;
 4ac:	88 e0       	ldi	r24, 0x08	; 8
 4ae:	85 87       	std	Z+13, r24	; 0x0d
	
	self->ADDR_PORT.P1 = &PORTA;
 4b0:	a0 e0       	ldi	r26, 0x00	; 0
 4b2:	b4 e0       	ldi	r27, 0x04	; 4
 4b4:	a6 87       	std	Z+14, r26	; 0x0e
 4b6:	b7 87       	std	Z+15, r27	; 0x0f
	self->ADDR_PORT.P2 = &PORTB;
 4b8:	80 e2       	ldi	r24, 0x20	; 32
 4ba:	94 e0       	ldi	r25, 0x04	; 4
 4bc:	80 8b       	std	Z+16, r24	; 0x10
 4be:	91 8b       	std	Z+17, r25	; 0x11
	/* Set all address pins as output */
	self->ADDR_PORT.P1->DIR = 0xFF;
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	8c 93       	st	X, r24
	self->ADDR_PORT.P2->DIR = 0xFF;
 4c4:	a0 89       	ldd	r26, Z+16	; 0x10
 4c6:	b1 89       	ldd	r27, Z+17	; 0x11
 4c8:	8c 93       	st	X, r24
	
	resetPins(self);
 4ca:	cf 01       	movw	r24, r30
 4cc:	88 cf       	rjmp	.-240    	; 0x3de <resetPins>

000004ce <__vector_9>:

#define RAM_READ_LENGTH		0xFF

DRAM_HANDLER dramHandler;

ISR(TCA0_CMP0_vect) {
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	2f 93       	push	r18
 4e6:	3f 93       	push	r19
 4e8:	4f 93       	push	r20
 4ea:	5f 93       	push	r21
 4ec:	6f 93       	push	r22
 4ee:	7f 93       	push	r23
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
 4f4:	af 93       	push	r26
 4f6:	bf 93       	push	r27
 4f8:	ef 93       	push	r30
 4fa:	ff 93       	push	r31
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	cf 5f       	subi	r28, 0xFF	; 255
 506:	d1 09       	sbc	r29, r1
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	c1 2c       	mov	r12, r1
 50e:	d1 2c       	mov	r13, r1
 510:	76 01       	movw	r14, r12
	volatile uint8_t vals[0xFF];
	for(uint8_t i = 0; i < RAM_READ_LENGTH; i++) {
		vals[i] = 0;
 512:	01 e0       	ldi	r16, 0x01	; 1
 514:	10 e0       	ldi	r17, 0x00	; 0
 516:	0c 0f       	add	r16, r28
 518:	1d 1f       	adc	r17, r29
 51a:	0c 0d       	add	r16, r12
 51c:	1d 1d       	adc	r17, r13
 51e:	f8 01       	movw	r30, r16
 520:	10 82       	st	Z, r1
		vals[i] = dramHandler.readByte(&dramHandler, i);
 522:	e0 91 2a 3c 	lds	r30, 0x3C2A	; 0x803c2a <__DATA_REGION_ORIGIN__+0x2a>
 526:	f0 91 2b 3c 	lds	r31, 0x3C2B	; 0x803c2b <__DATA_REGION_ORIGIN__+0x2b>
 52a:	b7 01       	movw	r22, r14
 52c:	a6 01       	movw	r20, r12
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	9c e3       	ldi	r25, 0x3C	; 60
 532:	09 95       	icall
 534:	f8 01       	movw	r30, r16
 536:	80 83       	st	Z, r24
 538:	ff ef       	ldi	r31, 0xFF	; 255
 53a:	cf 1a       	sub	r12, r31
 53c:	df 0a       	sbc	r13, r31
 53e:	ef 0a       	sbc	r14, r31
 540:	ff 0a       	sbc	r15, r31

DRAM_HANDLER dramHandler;

ISR(TCA0_CMP0_vect) {
	volatile uint8_t vals[0xFF];
	for(uint8_t i = 0; i < RAM_READ_LENGTH; i++) {
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	c8 16       	cp	r12, r24
 546:	d1 04       	cpc	r13, r1
 548:	e1 04       	cpc	r14, r1
 54a:	f1 04       	cpc	r15, r1
 54c:	11 f7       	brne	.-60     	; 0x512 <__vector_9+0x44>
		vals[i] = 0;
		vals[i] = dramHandler.readByte(&dramHandler, i);
	}
	
	dramHandler.hasPendingRefresh = true;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 28 3c 	sts	0x3C28, r24	; 0x803c28 <__DATA_REGION_ORIGIN__+0x28>
	/* Clear interrupt flag */
	TCA0.SINGLE.INTFLAGS |= (1 << TCA_SINGLE_CMP0EN_bp);
 554:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <__RODATA_PM_OFFSET__+0x7fca0b>
 558:	80 61       	ori	r24, 0x10	; 16
 55a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7fca0b>
}
 55e:	c1 50       	subi	r28, 0x01	; 1
 560:	df 4f       	sbci	r29, 0xFF	; 255
 562:	cd bf       	out	0x3d, r28	; 61
 564:	de bf       	out	0x3e, r29	; 62
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	ff 91       	pop	r31
 56c:	ef 91       	pop	r30
 56e:	bf 91       	pop	r27
 570:	af 91       	pop	r26
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	7f 91       	pop	r23
 578:	6f 91       	pop	r22
 57a:	5f 91       	pop	r21
 57c:	4f 91       	pop	r20
 57e:	3f 91       	pop	r19
 580:	2f 91       	pop	r18
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	df 90       	pop	r13
 58c:	cf 90       	pop	r12
 58e:	0f 90       	pop	r0
 590:	0f be       	out	0x3f, r0	; 63
 592:	0f 90       	pop	r0
 594:	1f 90       	pop	r1
 596:	18 95       	reti

00000598 <__vector_16>:

ISR(SPI0_INT_vect) {
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	4f 93       	push	r20
 5a8:	5f 93       	push	r21
 5aa:	6f 93       	push	r22
 5ac:	7f 93       	push	r23
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
 5b2:	af 93       	push	r26
 5b4:	bf 93       	push	r27
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
	const uint8_t data = SPI0.DATA;
 5be:	60 91 c4 08 	lds	r22, 0x08C4	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
	dramHandler.buffer.push(&dramHandler.buffer, data);
 5c2:	c0 e0       	ldi	r28, 0x00	; 0
 5c4:	dc e3       	ldi	r29, 0x3C	; 60
 5c6:	ea a1       	ldd	r30, Y+34	; 0x22
 5c8:	fb a1       	ldd	r31, Y+35	; 0x23
 5ca:	82 e1       	ldi	r24, 0x12	; 18
 5cc:	9c e3       	ldi	r25, 0x3C	; 60
 5ce:	09 95       	icall
	dramHandler.hasPendingBufferUpdate = true;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	89 a7       	std	Y+41, r24	; 0x29
}
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	bf 91       	pop	r27
 5de:	af 91       	pop	r26
 5e0:	9f 91       	pop	r25
 5e2:	8f 91       	pop	r24
 5e4:	7f 91       	pop	r23
 5e6:	6f 91       	pop	r22
 5e8:	5f 91       	pop	r21
 5ea:	4f 91       	pop	r20
 5ec:	3f 91       	pop	r19
 5ee:	2f 91       	pop	r18
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <initTimer0>:

void initTimer0() {
	/* Set Prescaler */
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV16_gc;
 5fa:	e0 e0       	ldi	r30, 0x00	; 0
 5fc:	fa e0       	ldi	r31, 0x0A	; 10
 5fe:	88 e0       	ldi	r24, 0x08	; 8
 600:	80 83       	st	Z, r24
	/* Set to Frequency Mode */
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_FRQ_gc;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	81 83       	std	Z+1, r24	; 0x01
	/* Set CMP value */
	TCA0.SINGLE.CMP0BUF = TIM0_COMP_VAL;
 606:	8e e3       	ldi	r24, 0x3E	; 62
 608:	99 e4       	ldi	r25, 0x49	; 73
 60a:	80 af       	std	Z+56, r24	; 0x38
 60c:	91 af       	std	Z+57, r25	; 0x39
	/* Enable Compare Channel 0 Interrupt */
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0EN_bm;
 60e:	80 e1       	ldi	r24, 0x10	; 16
 610:	82 87       	std	Z+10, r24	; 0x0a
	/* Enable TCA0 */
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
 612:	80 81       	ld	r24, Z
 614:	81 60       	ori	r24, 0x01	; 1
 616:	80 83       	st	Z, r24
 618:	08 95       	ret

0000061a <initSPI>:
}

void initSPI() {
	/* Configure SS Pin */
	PORTC.DIR |= PIN3_bm;
 61a:	e0 e4       	ldi	r30, 0x40	; 64
 61c:	f4 e0       	ldi	r31, 0x04	; 4
 61e:	80 81       	ld	r24, Z
 620:	88 60       	ori	r24, 0x08	; 8
 622:	80 83       	st	Z, r24
	PORTC.OUT |= PIN3_bm;
 624:	84 81       	ldd	r24, Z+4	; 0x04
 626:	88 60       	ori	r24, 0x08	; 8
 628:	84 83       	std	Z+4, r24	; 0x04
	/* Set device as master */
	SPI0.CTRLA |= SPI_MASTER_bm;
 62a:	e0 ec       	ldi	r30, 0xC0	; 192
 62c:	f8 e0       	ldi	r31, 0x08	; 8
 62e:	80 81       	ld	r24, Z
 630:	80 62       	ori	r24, 0x20	; 32
 632:	80 83       	st	Z, r24
	/* Select clock speed */
	SPI0.CTRLA |= SPI_PRESC_DIV16_gc;
 634:	80 81       	ld	r24, Z
 636:	82 60       	ori	r24, 0x02	; 2
 638:	80 83       	st	Z, r24
	/* Disable multi-master support */
	SPI0.CTRLB |= SPI_SSD_bm;
 63a:	81 81       	ldd	r24, Z+1	; 0x01
 63c:	84 60       	ori	r24, 0x04	; 4
 63e:	81 83       	std	Z+1, r24	; 0x01
	/* Enable buffer mode */
	SPI0.CTRLB |= SPI_BUFEN_bm;
 640:	81 81       	ldd	r24, Z+1	; 0x01
 642:	80 68       	ori	r24, 0x80	; 128
 644:	81 83       	std	Z+1, r24	; 0x01
	/* Enable Receive Interrupt */
	SPI0.INTCTRL |= SPI_RXCIE_bm;
 646:	82 81       	ldd	r24, Z+2	; 0x02
 648:	80 68       	ori	r24, 0x80	; 128
 64a:	82 83       	std	Z+2, r24	; 0x02
	/* Enable SPI */
	SPI0.CTRLA |= SPI_ENABLE_bm;
 64c:	80 81       	ld	r24, Z
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	80 83       	st	Z, r24
 652:	08 95       	ret

00000654 <initCPU>:
}

void initCPU() {
	/* Disable Configuration Change Protection */
	CCP = 0xD8;
 654:	88 ed       	ldi	r24, 0xD8	; 216
 656:	84 bf       	out	0x34, r24	; 52
	/* Set Clock source to 20MHz internal oscillator */
	CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_OSC20M_gc;
 658:	e0 e6       	ldi	r30, 0x60	; 96
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	10 82       	st	Z, r1
	/* Disable Configuration Change Protection */
	CCP = 0xD8;
 65e:	84 bf       	out	0x34, r24	; 52
	/* Disable prescaler */
	CLKCTRL.MCLKCTRLB &= ~(1 << CLKCTRL_PEN_bp);
 660:	81 81       	ldd	r24, Z+1	; 0x01
 662:	8e 7f       	andi	r24, 0xFE	; 254
 664:	81 83       	std	Z+1, r24	; 0x01
	
	/* Enable interrupts globally */
	sei();
 666:	78 94       	sei
 668:	08 95       	ret

0000066a <main>:
}

int main(void) {
	initDRAMHandler(&dramHandler);
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	9c e3       	ldi	r25, 0x3C	; 60
 66e:	f7 de       	rcall	.-530    	; 0x45e <initDRAMHandler>

	initCPU();
 670:	f1 df       	rcall	.-30     	; 0x654 <initCPU>
	initSPI();
 672:	d3 df       	rcall	.-90     	; 0x61a <initSPI>
	initTimer0();
 674:	c2 df       	rcall	.-124    	; 0x5fa <initTimer0>
 676:	c1 2c       	mov	r12, r1
 678:	d1 2c       	mov	r13, r1
 67a:	76 01       	movw	r14, r12
	
	for(uint8_t i = 0; i < RAM_READ_LENGTH; i++) {
		dramHandler.writeByte(&dramHandler, i, i);
 67c:	e0 91 2c 3c 	lds	r30, 0x3C2C	; 0x803c2c <__DATA_REGION_ORIGIN__+0x2c>
 680:	f0 91 2d 3c 	lds	r31, 0x3C2D	; 0x803c2d <__DATA_REGION_ORIGIN__+0x2d>
 684:	2c 2d       	mov	r18, r12
 686:	b7 01       	movw	r22, r14
 688:	a6 01       	movw	r20, r12
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	9c e3       	ldi	r25, 0x3C	; 60
 68e:	09 95       	icall
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	c8 1a       	sub	r12, r24
 694:	d8 0a       	sbc	r13, r24
 696:	e8 0a       	sbc	r14, r24
 698:	f8 0a       	sbc	r15, r24

	initCPU();
	initSPI();
	initTimer0();
	
	for(uint8_t i = 0; i < RAM_READ_LENGTH; i++) {
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	c8 16       	cp	r12, r24
 69e:	d1 04       	cpc	r13, r1
 6a0:	e1 04       	cpc	r14, r1
 6a2:	f1 04       	cpc	r15, r1
 6a4:	59 f7       	brne	.-42     	; 0x67c <main+0x12>
		dramHandler.writeByte(&dramHandler, i, i);
	}
	
    while (1) {
		if(dramHandler.hasPendingRefresh) {
 6a6:	80 91 28 3c 	lds	r24, 0x3C28	; 0x803c28 <__DATA_REGION_ORIGIN__+0x28>
 6aa:	88 23       	and	r24, r24
 6ac:	39 f0       	breq	.+14     	; 0x6bc <main+0x52>
			dramHandler.refreshRASonly(&dramHandler);
 6ae:	e0 91 2e 3c 	lds	r30, 0x3C2E	; 0x803c2e <__DATA_REGION_ORIGIN__+0x2e>
 6b2:	f0 91 2f 3c 	lds	r31, 0x3C2F	; 0x803c2f <__DATA_REGION_ORIGIN__+0x2f>
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	9c e3       	ldi	r25, 0x3C	; 60
 6ba:	09 95       	icall
		}
		if(dramHandler.hasPendingBufferUpdate) {
 6bc:	80 91 29 3c 	lds	r24, 0x3C29	; 0x803c29 <__DATA_REGION_ORIGIN__+0x29>
 6c0:	88 23       	and	r24, r24
 6c2:	89 f3       	breq	.-30     	; 0x6a6 <main+0x3c>
			dramHandler.processAndRespondBuffer(&dramHandler);
 6c4:	e0 91 30 3c 	lds	r30, 0x3C30	; 0x803c30 <__DATA_REGION_ORIGIN__+0x30>
 6c8:	f0 91 31 3c 	lds	r31, 0x3C31	; 0x803c31 <__DATA_REGION_ORIGIN__+0x31>
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	9c e3       	ldi	r25, 0x3C	; 60
 6d0:	09 95       	icall
 6d2:	e9 cf       	rjmp	.-46     	; 0x6a6 <main+0x3c>

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
